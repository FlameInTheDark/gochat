/*
GoChat API

Testing GuildAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package goclient

import (
	"context"
	openapiclient "github.com/FlameInTheDark/gochat/clients/api/goclient"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_goclient_GuildAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GuildAPIService GuildGuildIdCategoryCategoryIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var guildId int32
		var categoryId int32

		resp, httpRes, err := apiClient.GuildAPI.GuildGuildIdCategoryCategoryIdDelete(context.Background(), guildId, categoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuildAPIService GuildGuildIdCategoryPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var guildId int32

		resp, httpRes, err := apiClient.GuildAPI.GuildGuildIdCategoryPost(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuildAPIService GuildGuildIdChannelChannelIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var guildId int32
		var channelId int32

		resp, httpRes, err := apiClient.GuildAPI.GuildGuildIdChannelChannelIdDelete(context.Background(), guildId, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuildAPIService GuildGuildIdChannelChannelIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var guildId int32
		var channelId int32

		resp, httpRes, err := apiClient.GuildAPI.GuildGuildIdChannelChannelIdGet(context.Background(), guildId, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuildAPIService GuildGuildIdChannelGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var guildId int32

		resp, httpRes, err := apiClient.GuildAPI.GuildGuildIdChannelGet(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuildAPIService GuildGuildIdChannelPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var guildId int32

		resp, httpRes, err := apiClient.GuildAPI.GuildGuildIdChannelPost(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuildAPIService GuildGuildIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var guildId int32

		resp, httpRes, err := apiClient.GuildAPI.GuildGuildIdGet(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuildAPIService GuildGuildIdPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var guildId int32

		resp, httpRes, err := apiClient.GuildAPI.GuildGuildIdPatch(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuildAPIService GuildPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.GuildAPI.GuildPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
