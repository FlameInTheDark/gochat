/*
GoChat API

Testing GuildRolesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package goclient

import (
	"context"
	openapiclient "github.com/FlameInTheDark/gochat/clients/api/goclient"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_goclient_GuildRolesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GuildRolesAPIService GuildGuildIdMemberUserIdRolesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var guildId int32
		var userId int32

		resp, httpRes, err := apiClient.GuildRolesAPI.GuildGuildIdMemberUserIdRolesGet(context.Background(), guildId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuildRolesAPIService GuildGuildIdMemberUserIdRolesRoleIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var guildId int32
		var userId int32
		var roleId int32

		resp, httpRes, err := apiClient.GuildRolesAPI.GuildGuildIdMemberUserIdRolesRoleIdDelete(context.Background(), guildId, userId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuildRolesAPIService GuildGuildIdMemberUserIdRolesRoleIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var guildId int32
		var userId int32
		var roleId int32

		resp, httpRes, err := apiClient.GuildRolesAPI.GuildGuildIdMemberUserIdRolesRoleIdPut(context.Background(), guildId, userId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuildRolesAPIService GuildGuildIdRolesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var guildId int32

		resp, httpRes, err := apiClient.GuildRolesAPI.GuildGuildIdRolesGet(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuildRolesAPIService GuildGuildIdRolesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var guildId int32

		resp, httpRes, err := apiClient.GuildRolesAPI.GuildGuildIdRolesPost(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuildRolesAPIService GuildGuildIdRolesRoleIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var guildId int32
		var roleId int32

		resp, httpRes, err := apiClient.GuildRolesAPI.GuildGuildIdRolesRoleIdDelete(context.Background(), guildId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuildRolesAPIService GuildGuildIdRolesRoleIdPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var guildId int32
		var roleId int32

		resp, httpRes, err := apiClient.GuildRolesAPI.GuildGuildIdRolesRoleIdPatch(context.Background(), guildId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
