/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the DtoMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoMessage{}

// DtoMessage struct for DtoMessage
type DtoMessage struct {
	Attachments []DtoAttachment `json:"attachments,omitempty"`
	Author      *DtoUser        `json:"author,omitempty"`
	// Channel id the message was sent to
	ChannelId *int32  `json:"channel_id,omitempty"`
	Content   *string `json:"content,omitempty"`
	// Message ID
	Id *int32 `json:"id,omitempty"`
	// Timestamp of the last message edit
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewDtoMessage instantiates a new DtoMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoMessage() *DtoMessage {
	this := DtoMessage{}
	return &this
}

// NewDtoMessageWithDefaults instantiates a new DtoMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoMessageWithDefaults() *DtoMessage {
	this := DtoMessage{}
	return &this
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *DtoMessage) GetAttachments() []DtoAttachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []DtoAttachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMessage) GetAttachmentsOk() ([]DtoAttachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *DtoMessage) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []DtoAttachment and assigns it to the Attachments field.
func (o *DtoMessage) SetAttachments(v []DtoAttachment) {
	o.Attachments = v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *DtoMessage) GetAuthor() DtoUser {
	if o == nil || IsNil(o.Author) {
		var ret DtoUser
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMessage) GetAuthorOk() (*DtoUser, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *DtoMessage) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given DtoUser and assigns it to the Author field.
func (o *DtoMessage) SetAuthor(v DtoUser) {
	o.Author = &v
}

// GetChannelId returns the ChannelId field value if set, zero value otherwise.
func (o *DtoMessage) GetChannelId() int32 {
	if o == nil || IsNil(o.ChannelId) {
		var ret int32
		return ret
	}
	return *o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMessage) GetChannelIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ChannelId) {
		return nil, false
	}
	return o.ChannelId, true
}

// HasChannelId returns a boolean if a field has been set.
func (o *DtoMessage) HasChannelId() bool {
	if o != nil && !IsNil(o.ChannelId) {
		return true
	}

	return false
}

// SetChannelId gets a reference to the given int32 and assigns it to the ChannelId field.
func (o *DtoMessage) SetChannelId(v int32) {
	o.ChannelId = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *DtoMessage) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMessage) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *DtoMessage) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *DtoMessage) SetContent(v string) {
	o.Content = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DtoMessage) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMessage) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DtoMessage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DtoMessage) SetId(v int32) {
	o.Id = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DtoMessage) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMessage) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DtoMessage) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *DtoMessage) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o DtoMessage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.ChannelId) {
		toSerialize["channel_id"] = o.ChannelId
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableDtoMessage struct {
	value *DtoMessage
	isSet bool
}

func (v NullableDtoMessage) Get() *DtoMessage {
	return v.value
}

func (v *NullableDtoMessage) Set(val *DtoMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoMessage(val *DtoMessage) *NullableDtoMessage {
	return &NullableDtoMessage{value: val, isSet: true}
}

func (v NullableDtoMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
