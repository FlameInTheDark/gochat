/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the DtoAttachmentUpload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoAttachmentUpload{}

// DtoAttachmentUpload struct for DtoAttachmentUpload
type DtoAttachmentUpload struct {
	ChannelId *int32  `json:"channel_id,omitempty"`
	FileName  *string `json:"file_name,omitempty"`
	Id        *int32  `json:"id,omitempty"`
	UploadUrl *string `json:"upload_url,omitempty"`
}

// NewDtoAttachmentUpload instantiates a new DtoAttachmentUpload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoAttachmentUpload() *DtoAttachmentUpload {
	this := DtoAttachmentUpload{}
	return &this
}

// NewDtoAttachmentUploadWithDefaults instantiates a new DtoAttachmentUpload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoAttachmentUploadWithDefaults() *DtoAttachmentUpload {
	this := DtoAttachmentUpload{}
	return &this
}

// GetChannelId returns the ChannelId field value if set, zero value otherwise.
func (o *DtoAttachmentUpload) GetChannelId() int32 {
	if o == nil || IsNil(o.ChannelId) {
		var ret int32
		return ret
	}
	return *o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAttachmentUpload) GetChannelIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ChannelId) {
		return nil, false
	}
	return o.ChannelId, true
}

// HasChannelId returns a boolean if a field has been set.
func (o *DtoAttachmentUpload) HasChannelId() bool {
	if o != nil && !IsNil(o.ChannelId) {
		return true
	}

	return false
}

// SetChannelId gets a reference to the given int32 and assigns it to the ChannelId field.
func (o *DtoAttachmentUpload) SetChannelId(v int32) {
	o.ChannelId = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *DtoAttachmentUpload) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAttachmentUpload) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *DtoAttachmentUpload) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *DtoAttachmentUpload) SetFileName(v string) {
	o.FileName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DtoAttachmentUpload) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAttachmentUpload) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DtoAttachmentUpload) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DtoAttachmentUpload) SetId(v int32) {
	o.Id = &v
}

// GetUploadUrl returns the UploadUrl field value if set, zero value otherwise.
func (o *DtoAttachmentUpload) GetUploadUrl() string {
	if o == nil || IsNil(o.UploadUrl) {
		var ret string
		return ret
	}
	return *o.UploadUrl
}

// GetUploadUrlOk returns a tuple with the UploadUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAttachmentUpload) GetUploadUrlOk() (*string, bool) {
	if o == nil || IsNil(o.UploadUrl) {
		return nil, false
	}
	return o.UploadUrl, true
}

// HasUploadUrl returns a boolean if a field has been set.
func (o *DtoAttachmentUpload) HasUploadUrl() bool {
	if o != nil && !IsNil(o.UploadUrl) {
		return true
	}

	return false
}

// SetUploadUrl gets a reference to the given string and assigns it to the UploadUrl field.
func (o *DtoAttachmentUpload) SetUploadUrl(v string) {
	o.UploadUrl = &v
}

func (o DtoAttachmentUpload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoAttachmentUpload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChannelId) {
		toSerialize["channel_id"] = o.ChannelId
	}
	if !IsNil(o.FileName) {
		toSerialize["file_name"] = o.FileName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UploadUrl) {
		toSerialize["upload_url"] = o.UploadUrl
	}
	return toSerialize, nil
}

type NullableDtoAttachmentUpload struct {
	value *DtoAttachmentUpload
	isSet bool
}

func (v NullableDtoAttachmentUpload) Get() *DtoAttachmentUpload {
	return v.value
}

func (v *NullableDtoAttachmentUpload) Set(val *DtoAttachmentUpload) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoAttachmentUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoAttachmentUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoAttachmentUpload(val *DtoAttachmentUpload) *NullableDtoAttachmentUpload {
	return &NullableDtoAttachmentUpload{value: val, isSet: true}
}

func (v NullableDtoAttachmentUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoAttachmentUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
