/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the DtoUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoUser{}

// DtoUser Guild member data
type DtoUser struct {
	Avatar        *int32  `json:"avatar,omitempty"`
	Discriminator *string `json:"discriminator,omitempty"`
	Id            *int32  `json:"id,omitempty"`
	Name          *string `json:"name,omitempty"`
}

// NewDtoUser instantiates a new DtoUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoUser() *DtoUser {
	this := DtoUser{}
	return &this
}

// NewDtoUserWithDefaults instantiates a new DtoUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoUserWithDefaults() *DtoUser {
	this := DtoUser{}
	return &this
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *DtoUser) GetAvatar() int32 {
	if o == nil || IsNil(o.Avatar) {
		var ret int32
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUser) GetAvatarOk() (*int32, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *DtoUser) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given int32 and assigns it to the Avatar field.
func (o *DtoUser) SetAvatar(v int32) {
	o.Avatar = &v
}

// GetDiscriminator returns the Discriminator field value if set, zero value otherwise.
func (o *DtoUser) GetDiscriminator() string {
	if o == nil || IsNil(o.Discriminator) {
		var ret string
		return ret
	}
	return *o.Discriminator
}

// GetDiscriminatorOk returns a tuple with the Discriminator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUser) GetDiscriminatorOk() (*string, bool) {
	if o == nil || IsNil(o.Discriminator) {
		return nil, false
	}
	return o.Discriminator, true
}

// HasDiscriminator returns a boolean if a field has been set.
func (o *DtoUser) HasDiscriminator() bool {
	if o != nil && !IsNil(o.Discriminator) {
		return true
	}

	return false
}

// SetDiscriminator gets a reference to the given string and assigns it to the Discriminator field.
func (o *DtoUser) SetDiscriminator(v string) {
	o.Discriminator = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DtoUser) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUser) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DtoUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DtoUser) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtoUser) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUser) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtoUser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtoUser) SetName(v string) {
	o.Name = &v
}

func (o DtoUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	if !IsNil(o.Discriminator) {
		toSerialize["discriminator"] = o.Discriminator
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableDtoUser struct {
	value *DtoUser
	isSet bool
}

func (v NullableDtoUser) Get() *DtoUser {
	return v.value
}

func (v *NullableDtoUser) Set(val *DtoUser) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoUser) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoUser(val *DtoUser) *NullableDtoUser {
	return &NullableDtoUser{value: val, isSet: true}
}

func (v NullableDtoUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
