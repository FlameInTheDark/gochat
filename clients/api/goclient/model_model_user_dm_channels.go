/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the ModelUserDMChannels type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelUserDMChannels{}

// ModelUserDMChannels struct for ModelUserDMChannels
type ModelUserDMChannels struct {
	ChannelId   *int32 `json:"channel_id,omitempty"`
	Hidden      *bool  `json:"hidden,omitempty"`
	HiddenAfter *int32 `json:"hidden_after,omitempty"`
	UserId      *int32 `json:"user_id,omitempty"`
}

// NewModelUserDMChannels instantiates a new ModelUserDMChannels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelUserDMChannels() *ModelUserDMChannels {
	this := ModelUserDMChannels{}
	return &this
}

// NewModelUserDMChannelsWithDefaults instantiates a new ModelUserDMChannels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelUserDMChannelsWithDefaults() *ModelUserDMChannels {
	this := ModelUserDMChannels{}
	return &this
}

// GetChannelId returns the ChannelId field value if set, zero value otherwise.
func (o *ModelUserDMChannels) GetChannelId() int32 {
	if o == nil || IsNil(o.ChannelId) {
		var ret int32
		return ret
	}
	return *o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserDMChannels) GetChannelIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ChannelId) {
		return nil, false
	}
	return o.ChannelId, true
}

// HasChannelId returns a boolean if a field has been set.
func (o *ModelUserDMChannels) HasChannelId() bool {
	if o != nil && !IsNil(o.ChannelId) {
		return true
	}

	return false
}

// SetChannelId gets a reference to the given int32 and assigns it to the ChannelId field.
func (o *ModelUserDMChannels) SetChannelId(v int32) {
	o.ChannelId = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *ModelUserDMChannels) GetHidden() bool {
	if o == nil || IsNil(o.Hidden) {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserDMChannels) GetHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *ModelUserDMChannels) HasHidden() bool {
	if o != nil && !IsNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *ModelUserDMChannels) SetHidden(v bool) {
	o.Hidden = &v
}

// GetHiddenAfter returns the HiddenAfter field value if set, zero value otherwise.
func (o *ModelUserDMChannels) GetHiddenAfter() int32 {
	if o == nil || IsNil(o.HiddenAfter) {
		var ret int32
		return ret
	}
	return *o.HiddenAfter
}

// GetHiddenAfterOk returns a tuple with the HiddenAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserDMChannels) GetHiddenAfterOk() (*int32, bool) {
	if o == nil || IsNil(o.HiddenAfter) {
		return nil, false
	}
	return o.HiddenAfter, true
}

// HasHiddenAfter returns a boolean if a field has been set.
func (o *ModelUserDMChannels) HasHiddenAfter() bool {
	if o != nil && !IsNil(o.HiddenAfter) {
		return true
	}

	return false
}

// SetHiddenAfter gets a reference to the given int32 and assigns it to the HiddenAfter field.
func (o *ModelUserDMChannels) SetHiddenAfter(v int32) {
	o.HiddenAfter = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ModelUserDMChannels) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserDMChannels) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ModelUserDMChannels) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *ModelUserDMChannels) SetUserId(v int32) {
	o.UserId = &v
}

func (o ModelUserDMChannels) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelUserDMChannels) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChannelId) {
		toSerialize["channel_id"] = o.ChannelId
	}
	if !IsNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	if !IsNil(o.HiddenAfter) {
		toSerialize["hidden_after"] = o.HiddenAfter
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	return toSerialize, nil
}

type NullableModelUserDMChannels struct {
	value *ModelUserDMChannels
	isSet bool
}

func (v NullableModelUserDMChannels) Get() *ModelUserDMChannels {
	return v.value
}

func (v *NullableModelUserDMChannels) Set(val *ModelUserDMChannels) {
	v.value = val
	v.isSet = true
}

func (v NullableModelUserDMChannels) IsSet() bool {
	return v.isSet
}

func (v *NullableModelUserDMChannels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelUserDMChannels(val *ModelUserDMChannels) *NullableModelUserDMChannels {
	return &NullableModelUserDMChannels{value: val, isSet: true}
}

func (v NullableModelUserDMChannels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelUserDMChannels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
