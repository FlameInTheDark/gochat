/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the ModelUserSettingsAppearance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelUserSettingsAppearance{}

// ModelUserSettingsAppearance struct for ModelUserSettingsAppearance
type ModelUserSettingsAppearance struct {
	ChatFontScale *int32  `json:"chat_font_scale,omitempty"`
	ChatSpacing   *int32  `json:"chat_spacing,omitempty"`
	ColorScheme   *string `json:"color_scheme,omitempty"`
}

// NewModelUserSettingsAppearance instantiates a new ModelUserSettingsAppearance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelUserSettingsAppearance() *ModelUserSettingsAppearance {
	this := ModelUserSettingsAppearance{}
	return &this
}

// NewModelUserSettingsAppearanceWithDefaults instantiates a new ModelUserSettingsAppearance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelUserSettingsAppearanceWithDefaults() *ModelUserSettingsAppearance {
	this := ModelUserSettingsAppearance{}
	return &this
}

// GetChatFontScale returns the ChatFontScale field value if set, zero value otherwise.
func (o *ModelUserSettingsAppearance) GetChatFontScale() int32 {
	if o == nil || IsNil(o.ChatFontScale) {
		var ret int32
		return ret
	}
	return *o.ChatFontScale
}

// GetChatFontScaleOk returns a tuple with the ChatFontScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsAppearance) GetChatFontScaleOk() (*int32, bool) {
	if o == nil || IsNil(o.ChatFontScale) {
		return nil, false
	}
	return o.ChatFontScale, true
}

// HasChatFontScale returns a boolean if a field has been set.
func (o *ModelUserSettingsAppearance) HasChatFontScale() bool {
	if o != nil && !IsNil(o.ChatFontScale) {
		return true
	}

	return false
}

// SetChatFontScale gets a reference to the given int32 and assigns it to the ChatFontScale field.
func (o *ModelUserSettingsAppearance) SetChatFontScale(v int32) {
	o.ChatFontScale = &v
}

// GetChatSpacing returns the ChatSpacing field value if set, zero value otherwise.
func (o *ModelUserSettingsAppearance) GetChatSpacing() int32 {
	if o == nil || IsNil(o.ChatSpacing) {
		var ret int32
		return ret
	}
	return *o.ChatSpacing
}

// GetChatSpacingOk returns a tuple with the ChatSpacing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsAppearance) GetChatSpacingOk() (*int32, bool) {
	if o == nil || IsNil(o.ChatSpacing) {
		return nil, false
	}
	return o.ChatSpacing, true
}

// HasChatSpacing returns a boolean if a field has been set.
func (o *ModelUserSettingsAppearance) HasChatSpacing() bool {
	if o != nil && !IsNil(o.ChatSpacing) {
		return true
	}

	return false
}

// SetChatSpacing gets a reference to the given int32 and assigns it to the ChatSpacing field.
func (o *ModelUserSettingsAppearance) SetChatSpacing(v int32) {
	o.ChatSpacing = &v
}

// GetColorScheme returns the ColorScheme field value if set, zero value otherwise.
func (o *ModelUserSettingsAppearance) GetColorScheme() string {
	if o == nil || IsNil(o.ColorScheme) {
		var ret string
		return ret
	}
	return *o.ColorScheme
}

// GetColorSchemeOk returns a tuple with the ColorScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsAppearance) GetColorSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.ColorScheme) {
		return nil, false
	}
	return o.ColorScheme, true
}

// HasColorScheme returns a boolean if a field has been set.
func (o *ModelUserSettingsAppearance) HasColorScheme() bool {
	if o != nil && !IsNil(o.ColorScheme) {
		return true
	}

	return false
}

// SetColorScheme gets a reference to the given string and assigns it to the ColorScheme field.
func (o *ModelUserSettingsAppearance) SetColorScheme(v string) {
	o.ColorScheme = &v
}

func (o ModelUserSettingsAppearance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelUserSettingsAppearance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChatFontScale) {
		toSerialize["chat_font_scale"] = o.ChatFontScale
	}
	if !IsNil(o.ChatSpacing) {
		toSerialize["chat_spacing"] = o.ChatSpacing
	}
	if !IsNil(o.ColorScheme) {
		toSerialize["color_scheme"] = o.ColorScheme
	}
	return toSerialize, nil
}

type NullableModelUserSettingsAppearance struct {
	value *ModelUserSettingsAppearance
	isSet bool
}

func (v NullableModelUserSettingsAppearance) Get() *ModelUserSettingsAppearance {
	return v.value
}

func (v *NullableModelUserSettingsAppearance) Set(val *ModelUserSettingsAppearance) {
	v.value = val
	v.isSet = true
}

func (v NullableModelUserSettingsAppearance) IsSet() bool {
	return v.isSet
}

func (v *NullableModelUserSettingsAppearance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelUserSettingsAppearance(val *ModelUserSettingsAppearance) *NullableModelUserSettingsAppearance {
	return &NullableModelUserSettingsAppearance{value: val, isSet: true}
}

func (v NullableModelUserSettingsAppearance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelUserSettingsAppearance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
