/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the ModelUserSettingsData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelUserSettingsData{}

// ModelUserSettingsData struct for ModelUserSettingsData
type ModelUserSettingsData struct {
	Appearance     *ModelUserSettingsAppearance    `json:"appearance,omitempty"`
	Channels       []ModelUserSettingsChannel      `json:"channels,omitempty"`
	Devices        *ModelDevices                   `json:"devices,omitempty"`
	DmChannels     []ModelUserDMChannels           `json:"dm_channels,omitempty"`
	FavoriteGifs   []string                        `json:"favorite_gifs,omitempty"`
	ForcedPresence *string                         `json:"forced_presence,omitempty"`
	GuildFolders   []ModelUserSettingsGuildFolders `json:"guild_folders,omitempty"`
	Guilds         []ModelUserSettingsGuilds       `json:"guilds,omitempty"`
	Language       *string                         `json:"language,omitempty"`
	Status         *ModelStatus                    `json:"status,omitempty"`
	UiSounds       *ModelUserUISounds              `json:"ui_sounds,omitempty"`
	Users          []ModelUserSettingsUsers        `json:"users,omitempty"`
}

// NewModelUserSettingsData instantiates a new ModelUserSettingsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelUserSettingsData() *ModelUserSettingsData {
	this := ModelUserSettingsData{}
	return &this
}

// NewModelUserSettingsDataWithDefaults instantiates a new ModelUserSettingsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelUserSettingsDataWithDefaults() *ModelUserSettingsData {
	this := ModelUserSettingsData{}
	return &this
}

// GetAppearance returns the Appearance field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetAppearance() ModelUserSettingsAppearance {
	if o == nil || IsNil(o.Appearance) {
		var ret ModelUserSettingsAppearance
		return ret
	}
	return *o.Appearance
}

// GetAppearanceOk returns a tuple with the Appearance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetAppearanceOk() (*ModelUserSettingsAppearance, bool) {
	if o == nil || IsNil(o.Appearance) {
		return nil, false
	}
	return o.Appearance, true
}

// HasAppearance returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasAppearance() bool {
	if o != nil && !IsNil(o.Appearance) {
		return true
	}

	return false
}

// SetAppearance gets a reference to the given ModelUserSettingsAppearance and assigns it to the Appearance field.
func (o *ModelUserSettingsData) SetAppearance(v ModelUserSettingsAppearance) {
	o.Appearance = &v
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetChannels() []ModelUserSettingsChannel {
	if o == nil || IsNil(o.Channels) {
		var ret []ModelUserSettingsChannel
		return ret
	}
	return o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetChannelsOk() ([]ModelUserSettingsChannel, bool) {
	if o == nil || IsNil(o.Channels) {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasChannels() bool {
	if o != nil && !IsNil(o.Channels) {
		return true
	}

	return false
}

// SetChannels gets a reference to the given []ModelUserSettingsChannel and assigns it to the Channels field.
func (o *ModelUserSettingsData) SetChannels(v []ModelUserSettingsChannel) {
	o.Channels = v
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetDevices() ModelDevices {
	if o == nil || IsNil(o.Devices) {
		var ret ModelDevices
		return ret
	}
	return *o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetDevicesOk() (*ModelDevices, bool) {
	if o == nil || IsNil(o.Devices) {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasDevices() bool {
	if o != nil && !IsNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given ModelDevices and assigns it to the Devices field.
func (o *ModelUserSettingsData) SetDevices(v ModelDevices) {
	o.Devices = &v
}

// GetDmChannels returns the DmChannels field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetDmChannels() []ModelUserDMChannels {
	if o == nil || IsNil(o.DmChannels) {
		var ret []ModelUserDMChannels
		return ret
	}
	return o.DmChannels
}

// GetDmChannelsOk returns a tuple with the DmChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetDmChannelsOk() ([]ModelUserDMChannels, bool) {
	if o == nil || IsNil(o.DmChannels) {
		return nil, false
	}
	return o.DmChannels, true
}

// HasDmChannels returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasDmChannels() bool {
	if o != nil && !IsNil(o.DmChannels) {
		return true
	}

	return false
}

// SetDmChannels gets a reference to the given []ModelUserDMChannels and assigns it to the DmChannels field.
func (o *ModelUserSettingsData) SetDmChannels(v []ModelUserDMChannels) {
	o.DmChannels = v
}

// GetFavoriteGifs returns the FavoriteGifs field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetFavoriteGifs() []string {
	if o == nil || IsNil(o.FavoriteGifs) {
		var ret []string
		return ret
	}
	return o.FavoriteGifs
}

// GetFavoriteGifsOk returns a tuple with the FavoriteGifs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetFavoriteGifsOk() ([]string, bool) {
	if o == nil || IsNil(o.FavoriteGifs) {
		return nil, false
	}
	return o.FavoriteGifs, true
}

// HasFavoriteGifs returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasFavoriteGifs() bool {
	if o != nil && !IsNil(o.FavoriteGifs) {
		return true
	}

	return false
}

// SetFavoriteGifs gets a reference to the given []string and assigns it to the FavoriteGifs field.
func (o *ModelUserSettingsData) SetFavoriteGifs(v []string) {
	o.FavoriteGifs = v
}

// GetForcedPresence returns the ForcedPresence field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetForcedPresence() string {
	if o == nil || IsNil(o.ForcedPresence) {
		var ret string
		return ret
	}
	return *o.ForcedPresence
}

// GetForcedPresenceOk returns a tuple with the ForcedPresence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetForcedPresenceOk() (*string, bool) {
	if o == nil || IsNil(o.ForcedPresence) {
		return nil, false
	}
	return o.ForcedPresence, true
}

// HasForcedPresence returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasForcedPresence() bool {
	if o != nil && !IsNil(o.ForcedPresence) {
		return true
	}

	return false
}

// SetForcedPresence gets a reference to the given string and assigns it to the ForcedPresence field.
func (o *ModelUserSettingsData) SetForcedPresence(v string) {
	o.ForcedPresence = &v
}

// GetGuildFolders returns the GuildFolders field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetGuildFolders() []ModelUserSettingsGuildFolders {
	if o == nil || IsNil(o.GuildFolders) {
		var ret []ModelUserSettingsGuildFolders
		return ret
	}
	return o.GuildFolders
}

// GetGuildFoldersOk returns a tuple with the GuildFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetGuildFoldersOk() ([]ModelUserSettingsGuildFolders, bool) {
	if o == nil || IsNil(o.GuildFolders) {
		return nil, false
	}
	return o.GuildFolders, true
}

// HasGuildFolders returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasGuildFolders() bool {
	if o != nil && !IsNil(o.GuildFolders) {
		return true
	}

	return false
}

// SetGuildFolders gets a reference to the given []ModelUserSettingsGuildFolders and assigns it to the GuildFolders field.
func (o *ModelUserSettingsData) SetGuildFolders(v []ModelUserSettingsGuildFolders) {
	o.GuildFolders = v
}

// GetGuilds returns the Guilds field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetGuilds() []ModelUserSettingsGuilds {
	if o == nil || IsNil(o.Guilds) {
		var ret []ModelUserSettingsGuilds
		return ret
	}
	return o.Guilds
}

// GetGuildsOk returns a tuple with the Guilds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetGuildsOk() ([]ModelUserSettingsGuilds, bool) {
	if o == nil || IsNil(o.Guilds) {
		return nil, false
	}
	return o.Guilds, true
}

// HasGuilds returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasGuilds() bool {
	if o != nil && !IsNil(o.Guilds) {
		return true
	}

	return false
}

// SetGuilds gets a reference to the given []ModelUserSettingsGuilds and assigns it to the Guilds field.
func (o *ModelUserSettingsData) SetGuilds(v []ModelUserSettingsGuilds) {
	o.Guilds = v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ModelUserSettingsData) SetLanguage(v string) {
	o.Language = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetStatus() ModelStatus {
	if o == nil || IsNil(o.Status) {
		var ret ModelStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetStatusOk() (*ModelStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ModelStatus and assigns it to the Status field.
func (o *ModelUserSettingsData) SetStatus(v ModelStatus) {
	o.Status = &v
}

// GetUiSounds returns the UiSounds field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetUiSounds() ModelUserUISounds {
	if o == nil || IsNil(o.UiSounds) {
		var ret ModelUserUISounds
		return ret
	}
	return *o.UiSounds
}

// GetUiSoundsOk returns a tuple with the UiSounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetUiSoundsOk() (*ModelUserUISounds, bool) {
	if o == nil || IsNil(o.UiSounds) {
		return nil, false
	}
	return o.UiSounds, true
}

// HasUiSounds returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasUiSounds() bool {
	if o != nil && !IsNil(o.UiSounds) {
		return true
	}

	return false
}

// SetUiSounds gets a reference to the given ModelUserUISounds and assigns it to the UiSounds field.
func (o *ModelUserSettingsData) SetUiSounds(v ModelUserUISounds) {
	o.UiSounds = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetUsers() []ModelUserSettingsUsers {
	if o == nil || IsNil(o.Users) {
		var ret []ModelUserSettingsUsers
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetUsersOk() ([]ModelUserSettingsUsers, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []ModelUserSettingsUsers and assigns it to the Users field.
func (o *ModelUserSettingsData) SetUsers(v []ModelUserSettingsUsers) {
	o.Users = v
}

func (o ModelUserSettingsData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelUserSettingsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Appearance) {
		toSerialize["appearance"] = o.Appearance
	}
	if !IsNil(o.Channels) {
		toSerialize["channels"] = o.Channels
	}
	if !IsNil(o.Devices) {
		toSerialize["devices"] = o.Devices
	}
	if !IsNil(o.DmChannels) {
		toSerialize["dm_channels"] = o.DmChannels
	}
	if !IsNil(o.FavoriteGifs) {
		toSerialize["favorite_gifs"] = o.FavoriteGifs
	}
	if !IsNil(o.ForcedPresence) {
		toSerialize["forced_presence"] = o.ForcedPresence
	}
	if !IsNil(o.GuildFolders) {
		toSerialize["guild_folders"] = o.GuildFolders
	}
	if !IsNil(o.Guilds) {
		toSerialize["guilds"] = o.Guilds
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UiSounds) {
		toSerialize["ui_sounds"] = o.UiSounds
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableModelUserSettingsData struct {
	value *ModelUserSettingsData
	isSet bool
}

func (v NullableModelUserSettingsData) Get() *ModelUserSettingsData {
	return v.value
}

func (v *NullableModelUserSettingsData) Set(val *ModelUserSettingsData) {
	v.value = val
	v.isSet = true
}

func (v NullableModelUserSettingsData) IsSet() bool {
	return v.isSet
}

func (v *NullableModelUserSettingsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelUserSettingsData(val *ModelUserSettingsData) *NullableModelUserSettingsData {
	return &NullableModelUserSettingsData{value: val, isSet: true}
}

func (v NullableModelUserSettingsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelUserSettingsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
