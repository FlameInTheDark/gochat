/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the ModelUserSettingsData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelUserSettingsData{}

// ModelUserSettingsData struct for ModelUserSettingsData
type ModelUserSettingsData struct {
	Appearance    *ModelUserSettingsAppearance    `json:"appearance,omitempty"`
	FavoriteGifs  []string                        `json:"favorite_gifs,omitempty"`
	GuildFolders  []ModelUserSettingsGuildFolders `json:"guild_folders,omitempty"`
	Guilds        []ModelUserSettingsGuilds       `json:"guilds,omitempty"`
	Language      *string                         `json:"language,omitempty"`
	SelectedGuild *int32                          `json:"selected_guild,omitempty"`
}

// NewModelUserSettingsData instantiates a new ModelUserSettingsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelUserSettingsData() *ModelUserSettingsData {
	this := ModelUserSettingsData{}
	return &this
}

// NewModelUserSettingsDataWithDefaults instantiates a new ModelUserSettingsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelUserSettingsDataWithDefaults() *ModelUserSettingsData {
	this := ModelUserSettingsData{}
	return &this
}

// GetAppearance returns the Appearance field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetAppearance() ModelUserSettingsAppearance {
	if o == nil || IsNil(o.Appearance) {
		var ret ModelUserSettingsAppearance
		return ret
	}
	return *o.Appearance
}

// GetAppearanceOk returns a tuple with the Appearance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetAppearanceOk() (*ModelUserSettingsAppearance, bool) {
	if o == nil || IsNil(o.Appearance) {
		return nil, false
	}
	return o.Appearance, true
}

// HasAppearance returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasAppearance() bool {
	if o != nil && !IsNil(o.Appearance) {
		return true
	}

	return false
}

// SetAppearance gets a reference to the given ModelUserSettingsAppearance and assigns it to the Appearance field.
func (o *ModelUserSettingsData) SetAppearance(v ModelUserSettingsAppearance) {
	o.Appearance = &v
}

// GetFavoriteGifs returns the FavoriteGifs field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetFavoriteGifs() []string {
	if o == nil || IsNil(o.FavoriteGifs) {
		var ret []string
		return ret
	}
	return o.FavoriteGifs
}

// GetFavoriteGifsOk returns a tuple with the FavoriteGifs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetFavoriteGifsOk() ([]string, bool) {
	if o == nil || IsNil(o.FavoriteGifs) {
		return nil, false
	}
	return o.FavoriteGifs, true
}

// HasFavoriteGifs returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasFavoriteGifs() bool {
	if o != nil && !IsNil(o.FavoriteGifs) {
		return true
	}

	return false
}

// SetFavoriteGifs gets a reference to the given []string and assigns it to the FavoriteGifs field.
func (o *ModelUserSettingsData) SetFavoriteGifs(v []string) {
	o.FavoriteGifs = v
}

// GetGuildFolders returns the GuildFolders field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetGuildFolders() []ModelUserSettingsGuildFolders {
	if o == nil || IsNil(o.GuildFolders) {
		var ret []ModelUserSettingsGuildFolders
		return ret
	}
	return o.GuildFolders
}

// GetGuildFoldersOk returns a tuple with the GuildFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetGuildFoldersOk() ([]ModelUserSettingsGuildFolders, bool) {
	if o == nil || IsNil(o.GuildFolders) {
		return nil, false
	}
	return o.GuildFolders, true
}

// HasGuildFolders returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasGuildFolders() bool {
	if o != nil && !IsNil(o.GuildFolders) {
		return true
	}

	return false
}

// SetGuildFolders gets a reference to the given []ModelUserSettingsGuildFolders and assigns it to the GuildFolders field.
func (o *ModelUserSettingsData) SetGuildFolders(v []ModelUserSettingsGuildFolders) {
	o.GuildFolders = v
}

// GetGuilds returns the Guilds field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetGuilds() []ModelUserSettingsGuilds {
	if o == nil || IsNil(o.Guilds) {
		var ret []ModelUserSettingsGuilds
		return ret
	}
	return o.Guilds
}

// GetGuildsOk returns a tuple with the Guilds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetGuildsOk() ([]ModelUserSettingsGuilds, bool) {
	if o == nil || IsNil(o.Guilds) {
		return nil, false
	}
	return o.Guilds, true
}

// HasGuilds returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasGuilds() bool {
	if o != nil && !IsNil(o.Guilds) {
		return true
	}

	return false
}

// SetGuilds gets a reference to the given []ModelUserSettingsGuilds and assigns it to the Guilds field.
func (o *ModelUserSettingsData) SetGuilds(v []ModelUserSettingsGuilds) {
	o.Guilds = v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ModelUserSettingsData) SetLanguage(v string) {
	o.Language = &v
}

// GetSelectedGuild returns the SelectedGuild field value if set, zero value otherwise.
func (o *ModelUserSettingsData) GetSelectedGuild() int32 {
	if o == nil || IsNil(o.SelectedGuild) {
		var ret int32
		return ret
	}
	return *o.SelectedGuild
}

// GetSelectedGuildOk returns a tuple with the SelectedGuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsData) GetSelectedGuildOk() (*int32, bool) {
	if o == nil || IsNil(o.SelectedGuild) {
		return nil, false
	}
	return o.SelectedGuild, true
}

// HasSelectedGuild returns a boolean if a field has been set.
func (o *ModelUserSettingsData) HasSelectedGuild() bool {
	if o != nil && !IsNil(o.SelectedGuild) {
		return true
	}

	return false
}

// SetSelectedGuild gets a reference to the given int32 and assigns it to the SelectedGuild field.
func (o *ModelUserSettingsData) SetSelectedGuild(v int32) {
	o.SelectedGuild = &v
}

func (o ModelUserSettingsData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelUserSettingsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Appearance) {
		toSerialize["appearance"] = o.Appearance
	}
	if !IsNil(o.FavoriteGifs) {
		toSerialize["favorite_gifs"] = o.FavoriteGifs
	}
	if !IsNil(o.GuildFolders) {
		toSerialize["guild_folders"] = o.GuildFolders
	}
	if !IsNil(o.Guilds) {
		toSerialize["guilds"] = o.Guilds
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.SelectedGuild) {
		toSerialize["selected_guild"] = o.SelectedGuild
	}
	return toSerialize, nil
}

type NullableModelUserSettingsData struct {
	value *ModelUserSettingsData
	isSet bool
}

func (v NullableModelUserSettingsData) Get() *ModelUserSettingsData {
	return v.value
}

func (v *NullableModelUserSettingsData) Set(val *ModelUserSettingsData) {
	v.value = val
	v.isSet = true
}

func (v NullableModelUserSettingsData) IsSet() bool {
	return v.isSet
}

func (v *NullableModelUserSettingsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelUserSettingsData(val *ModelUserSettingsData) *NullableModelUserSettingsData {
	return &NullableModelUserSettingsData{value: val, isSet: true}
}

func (v NullableModelUserSettingsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelUserSettingsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
