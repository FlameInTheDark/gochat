/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// GuildInvitesAPIService GuildInvitesAPI service
type GuildInvitesAPIService service

type ApiGuildInvitesAcceptInviteCodePostRequest struct {
	ctx        context.Context
	ApiService *GuildInvitesAPIService
	inviteCode string
}

func (r ApiGuildInvitesAcceptInviteCodePostRequest) Execute() (*DtoGuild, *http.Response, error) {
	return r.ApiService.GuildInvitesAcceptInviteCodePostExecute(r)
}

/*
GuildInvitesAcceptInviteCodePost Accept invite and join guild

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param inviteCode Invite code
	@return ApiGuildInvitesAcceptInviteCodePostRequest
*/
func (a *GuildInvitesAPIService) GuildInvitesAcceptInviteCodePost(ctx context.Context, inviteCode string) ApiGuildInvitesAcceptInviteCodePostRequest {
	return ApiGuildInvitesAcceptInviteCodePostRequest{
		ApiService: a,
		ctx:        ctx,
		inviteCode: inviteCode,
	}
}

// Execute executes the request
//
//	@return DtoGuild
func (a *GuildInvitesAPIService) GuildInvitesAcceptInviteCodePostExecute(r ApiGuildInvitesAcceptInviteCodePostRequest) (*DtoGuild, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DtoGuild
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GuildInvitesAPIService.GuildInvitesAcceptInviteCodePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/guild/invites/accept/{invite_code}"
	localVarPath = strings.Replace(localVarPath, "{"+"invite_code"+"}", url.PathEscape(parameterValueToString(r.inviteCode, "inviteCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGuildInvitesGuildIdGetRequest struct {
	ctx        context.Context
	ApiService *GuildInvitesAPIService
	guildId    int32
}

func (r ApiGuildInvitesGuildIdGetRequest) Execute() ([]DtoGuildInvite, *http.Response, error) {
	return r.ApiService.GuildInvitesGuildIdGetExecute(r)
}

/*
GuildInvitesGuildIdGet List active invites for guild

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guildId Guild id
	@return ApiGuildInvitesGuildIdGetRequest
*/
func (a *GuildInvitesAPIService) GuildInvitesGuildIdGet(ctx context.Context, guildId int32) ApiGuildInvitesGuildIdGetRequest {
	return ApiGuildInvitesGuildIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		guildId:    guildId,
	}
}

// Execute executes the request
//
//	@return []DtoGuildInvite
func (a *GuildInvitesAPIService) GuildInvitesGuildIdGetExecute(r ApiGuildInvitesGuildIdGetRequest) ([]DtoGuildInvite, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DtoGuildInvite
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GuildInvitesAPIService.GuildInvitesGuildIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/guild/invites/{guild_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"guild_id"+"}", url.PathEscape(parameterValueToString(r.guildId, "guildId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGuildInvitesGuildIdInviteIdDeleteRequest struct {
	ctx        context.Context
	ApiService *GuildInvitesAPIService
	guildId    int32
	inviteId   int32
}

func (r ApiGuildInvitesGuildIdInviteIdDeleteRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GuildInvitesGuildIdInviteIdDeleteExecute(r)
}

/*
GuildInvitesGuildIdInviteIdDelete Delete an invite by id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guildId Guild id
	@param inviteId Invite id
	@return ApiGuildInvitesGuildIdInviteIdDeleteRequest
*/
func (a *GuildInvitesAPIService) GuildInvitesGuildIdInviteIdDelete(ctx context.Context, guildId int32, inviteId int32) ApiGuildInvitesGuildIdInviteIdDeleteRequest {
	return ApiGuildInvitesGuildIdInviteIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		guildId:    guildId,
		inviteId:   inviteId,
	}
}

// Execute executes the request
//
//	@return string
func (a *GuildInvitesAPIService) GuildInvitesGuildIdInviteIdDeleteExecute(r ApiGuildInvitesGuildIdInviteIdDeleteRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GuildInvitesAPIService.GuildInvitesGuildIdInviteIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/guild/invites/{guild_id}/{invite_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"guild_id"+"}", url.PathEscape(parameterValueToString(r.guildId, "guildId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"invite_id"+"}", url.PathEscape(parameterValueToString(r.inviteId, "inviteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGuildInvitesGuildIdPostRequest struct {
	ctx                      context.Context
	ApiService               *GuildInvitesAPIService
	guildId                  int32
	guildCreateInviteRequest *GuildCreateInviteRequest
}

// Invite options
func (r ApiGuildInvitesGuildIdPostRequest) GuildCreateInviteRequest(guildCreateInviteRequest GuildCreateInviteRequest) ApiGuildInvitesGuildIdPostRequest {
	r.guildCreateInviteRequest = &guildCreateInviteRequest
	return r
}

func (r ApiGuildInvitesGuildIdPostRequest) Execute() (*DtoGuildInvite, *http.Response, error) {
	return r.ApiService.GuildInvitesGuildIdPostExecute(r)
}

/*
GuildInvitesGuildIdPost Create a new invite

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guildId Guild id
	@return ApiGuildInvitesGuildIdPostRequest
*/
func (a *GuildInvitesAPIService) GuildInvitesGuildIdPost(ctx context.Context, guildId int32) ApiGuildInvitesGuildIdPostRequest {
	return ApiGuildInvitesGuildIdPostRequest{
		ApiService: a,
		ctx:        ctx,
		guildId:    guildId,
	}
}

// Execute executes the request
//
//	@return DtoGuildInvite
func (a *GuildInvitesAPIService) GuildInvitesGuildIdPostExecute(r ApiGuildInvitesGuildIdPostRequest) (*DtoGuildInvite, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DtoGuildInvite
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GuildInvitesAPIService.GuildInvitesGuildIdPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/guild/invites/{guild_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"guild_id"+"}", url.PathEscape(parameterValueToString(r.guildId, "guildId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.guildCreateInviteRequest == nil {
		return localVarReturnValue, nil, reportError("guildCreateInviteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.guildCreateInviteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGuildInvitesReceiveInviteCodeGetRequest struct {
	ctx        context.Context
	ApiService *GuildInvitesAPIService
	inviteCode string
}

func (r ApiGuildInvitesReceiveInviteCodeGetRequest) Execute() (*DtoInvitePreview, *http.Response, error) {
	return r.ApiService.GuildInvitesReceiveInviteCodeGetExecute(r)
}

/*
GuildInvitesReceiveInviteCodeGet Get invite info by code

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param inviteCode Invite code
	@return ApiGuildInvitesReceiveInviteCodeGetRequest
*/
func (a *GuildInvitesAPIService) GuildInvitesReceiveInviteCodeGet(ctx context.Context, inviteCode string) ApiGuildInvitesReceiveInviteCodeGetRequest {
	return ApiGuildInvitesReceiveInviteCodeGetRequest{
		ApiService: a,
		ctx:        ctx,
		inviteCode: inviteCode,
	}
}

// Execute executes the request
//
//	@return DtoInvitePreview
func (a *GuildInvitesAPIService) GuildInvitesReceiveInviteCodeGetExecute(r ApiGuildInvitesReceiveInviteCodeGetRequest) (*DtoInvitePreview, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DtoInvitePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GuildInvitesAPIService.GuildInvitesReceiveInviteCodeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/guild/invites/receive/{invite_code}"
	localVarPath = strings.Replace(localVarPath, "{"+"invite_code"+"}", url.PathEscape(parameterValueToString(r.inviteCode, "inviteCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
