/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the DtoMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoMember{}

// DtoMember struct for DtoMember
type DtoMember struct {
	Avatar   *int32   `json:"avatar,omitempty"`
	JoinAt   *string  `json:"join_at,omitempty"`
	Roles    []int32  `json:"roles,omitempty"`
	UserId   *DtoUser `json:"user_id,omitempty"`
	Username *string  `json:"username,omitempty"`
}

// NewDtoMember instantiates a new DtoMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoMember() *DtoMember {
	this := DtoMember{}
	return &this
}

// NewDtoMemberWithDefaults instantiates a new DtoMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoMemberWithDefaults() *DtoMember {
	this := DtoMember{}
	return &this
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *DtoMember) GetAvatar() int32 {
	if o == nil || IsNil(o.Avatar) {
		var ret int32
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMember) GetAvatarOk() (*int32, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *DtoMember) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given int32 and assigns it to the Avatar field.
func (o *DtoMember) SetAvatar(v int32) {
	o.Avatar = &v
}

// GetJoinAt returns the JoinAt field value if set, zero value otherwise.
func (o *DtoMember) GetJoinAt() string {
	if o == nil || IsNil(o.JoinAt) {
		var ret string
		return ret
	}
	return *o.JoinAt
}

// GetJoinAtOk returns a tuple with the JoinAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMember) GetJoinAtOk() (*string, bool) {
	if o == nil || IsNil(o.JoinAt) {
		return nil, false
	}
	return o.JoinAt, true
}

// HasJoinAt returns a boolean if a field has been set.
func (o *DtoMember) HasJoinAt() bool {
	if o != nil && !IsNil(o.JoinAt) {
		return true
	}

	return false
}

// SetJoinAt gets a reference to the given string and assigns it to the JoinAt field.
func (o *DtoMember) SetJoinAt(v string) {
	o.JoinAt = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *DtoMember) GetRoles() []int32 {
	if o == nil || IsNil(o.Roles) {
		var ret []int32
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMember) GetRolesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *DtoMember) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []int32 and assigns it to the Roles field.
func (o *DtoMember) SetRoles(v []int32) {
	o.Roles = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *DtoMember) GetUserId() DtoUser {
	if o == nil || IsNil(o.UserId) {
		var ret DtoUser
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMember) GetUserIdOk() (*DtoUser, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *DtoMember) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given DtoUser and assigns it to the UserId field.
func (o *DtoMember) SetUserId(v DtoUser) {
	o.UserId = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *DtoMember) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMember) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *DtoMember) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *DtoMember) SetUsername(v string) {
	o.Username = &v
}

func (o DtoMember) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	if !IsNil(o.JoinAt) {
		toSerialize["join_at"] = o.JoinAt
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableDtoMember struct {
	value *DtoMember
	isSet bool
}

func (v NullableDtoMember) Get() *DtoMember {
	return v.value
}

func (v *NullableDtoMember) Set(val *DtoMember) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoMember) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoMember(val *DtoMember) *NullableDtoMember {
	return &NullableDtoMember{value: val, isSet: true}
}

func (v NullableDtoMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
