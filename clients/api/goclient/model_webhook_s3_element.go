/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the WebhookS3Element type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookS3Element{}

// WebhookS3Element struct for WebhookS3Element
type WebhookS3Element struct {
	Bucket          *WebhookS3Bucket `json:"bucket,omitempty"`
	ConfigurationId *string          `json:"configurationId,omitempty"`
	Object          *WebhookS3Object `json:"object,omitempty"`
	S3SchemaVersion *string          `json:"s3SchemaVersion,omitempty"`
}

// NewWebhookS3Element instantiates a new WebhookS3Element object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookS3Element() *WebhookS3Element {
	this := WebhookS3Element{}
	return &this
}

// NewWebhookS3ElementWithDefaults instantiates a new WebhookS3Element object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookS3ElementWithDefaults() *WebhookS3Element {
	this := WebhookS3Element{}
	return &this
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *WebhookS3Element) GetBucket() WebhookS3Bucket {
	if o == nil || IsNil(o.Bucket) {
		var ret WebhookS3Bucket
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3Element) GetBucketOk() (*WebhookS3Bucket, bool) {
	if o == nil || IsNil(o.Bucket) {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *WebhookS3Element) HasBucket() bool {
	if o != nil && !IsNil(o.Bucket) {
		return true
	}

	return false
}

// SetBucket gets a reference to the given WebhookS3Bucket and assigns it to the Bucket field.
func (o *WebhookS3Element) SetBucket(v WebhookS3Bucket) {
	o.Bucket = &v
}

// GetConfigurationId returns the ConfigurationId field value if set, zero value otherwise.
func (o *WebhookS3Element) GetConfigurationId() string {
	if o == nil || IsNil(o.ConfigurationId) {
		var ret string
		return ret
	}
	return *o.ConfigurationId
}

// GetConfigurationIdOk returns a tuple with the ConfigurationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3Element) GetConfigurationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigurationId) {
		return nil, false
	}
	return o.ConfigurationId, true
}

// HasConfigurationId returns a boolean if a field has been set.
func (o *WebhookS3Element) HasConfigurationId() bool {
	if o != nil && !IsNil(o.ConfigurationId) {
		return true
	}

	return false
}

// SetConfigurationId gets a reference to the given string and assigns it to the ConfigurationId field.
func (o *WebhookS3Element) SetConfigurationId(v string) {
	o.ConfigurationId = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *WebhookS3Element) GetObject() WebhookS3Object {
	if o == nil || IsNil(o.Object) {
		var ret WebhookS3Object
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3Element) GetObjectOk() (*WebhookS3Object, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *WebhookS3Element) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given WebhookS3Object and assigns it to the Object field.
func (o *WebhookS3Element) SetObject(v WebhookS3Object) {
	o.Object = &v
}

// GetS3SchemaVersion returns the S3SchemaVersion field value if set, zero value otherwise.
func (o *WebhookS3Element) GetS3SchemaVersion() string {
	if o == nil || IsNil(o.S3SchemaVersion) {
		var ret string
		return ret
	}
	return *o.S3SchemaVersion
}

// GetS3SchemaVersionOk returns a tuple with the S3SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3Element) GetS3SchemaVersionOk() (*string, bool) {
	if o == nil || IsNil(o.S3SchemaVersion) {
		return nil, false
	}
	return o.S3SchemaVersion, true
}

// HasS3SchemaVersion returns a boolean if a field has been set.
func (o *WebhookS3Element) HasS3SchemaVersion() bool {
	if o != nil && !IsNil(o.S3SchemaVersion) {
		return true
	}

	return false
}

// SetS3SchemaVersion gets a reference to the given string and assigns it to the S3SchemaVersion field.
func (o *WebhookS3Element) SetS3SchemaVersion(v string) {
	o.S3SchemaVersion = &v
}

func (o WebhookS3Element) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookS3Element) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bucket) {
		toSerialize["bucket"] = o.Bucket
	}
	if !IsNil(o.ConfigurationId) {
		toSerialize["configurationId"] = o.ConfigurationId
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.S3SchemaVersion) {
		toSerialize["s3SchemaVersion"] = o.S3SchemaVersion
	}
	return toSerialize, nil
}

type NullableWebhookS3Element struct {
	value *WebhookS3Element
	isSet bool
}

func (v NullableWebhookS3Element) Get() *WebhookS3Element {
	return v.value
}

func (v *NullableWebhookS3Element) Set(val *WebhookS3Element) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookS3Element) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookS3Element) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookS3Element(val *WebhookS3Element) *NullableWebhookS3Element {
	return &NullableWebhookS3Element{value: val, isSet: true}
}

func (v NullableWebhookS3Element) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookS3Element) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
