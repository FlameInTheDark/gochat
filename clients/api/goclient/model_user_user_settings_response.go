/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the UserUserSettingsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserUserSettingsResponse{}

// UserUserSettingsResponse struct for UserUserSettingsResponse
type UserUserSettingsResponse struct {
	ChannelMentions    map[string][]ModelChannelMention `json:"channel_mentions,omitempty"`
	Guilds             []DtoGuild                       `json:"guilds,omitempty"`
	GuildsLastMessages map[string]map[string]int32      `json:"guilds_last_messages,omitempty"`
	Mentions           map[string][]ModelMention        `json:"mentions,omitempty"`
	ReadStates         map[string]int32                 `json:"read_states,omitempty"`
	Settings           *ModelUserSettingsData           `json:"settings,omitempty"`
	Version            *int32                           `json:"version,omitempty"`
}

// NewUserUserSettingsResponse instantiates a new UserUserSettingsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUserSettingsResponse() *UserUserSettingsResponse {
	this := UserUserSettingsResponse{}
	return &this
}

// NewUserUserSettingsResponseWithDefaults instantiates a new UserUserSettingsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUserSettingsResponseWithDefaults() *UserUserSettingsResponse {
	this := UserUserSettingsResponse{}
	return &this
}

// GetChannelMentions returns the ChannelMentions field value if set, zero value otherwise.
func (o *UserUserSettingsResponse) GetChannelMentions() map[string][]ModelChannelMention {
	if o == nil || IsNil(o.ChannelMentions) {
		var ret map[string][]ModelChannelMention
		return ret
	}
	return o.ChannelMentions
}

// GetChannelMentionsOk returns a tuple with the ChannelMentions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUserSettingsResponse) GetChannelMentionsOk() (map[string][]ModelChannelMention, bool) {
	if o == nil || IsNil(o.ChannelMentions) {
		return map[string][]ModelChannelMention{}, false
	}
	return o.ChannelMentions, true
}

// HasChannelMentions returns a boolean if a field has been set.
func (o *UserUserSettingsResponse) HasChannelMentions() bool {
	if o != nil && !IsNil(o.ChannelMentions) {
		return true
	}

	return false
}

// SetChannelMentions gets a reference to the given map[string][]ModelChannelMention and assigns it to the ChannelMentions field.
func (o *UserUserSettingsResponse) SetChannelMentions(v map[string][]ModelChannelMention) {
	o.ChannelMentions = v
}

// GetGuilds returns the Guilds field value if set, zero value otherwise.
func (o *UserUserSettingsResponse) GetGuilds() []DtoGuild {
	if o == nil || IsNil(o.Guilds) {
		var ret []DtoGuild
		return ret
	}
	return o.Guilds
}

// GetGuildsOk returns a tuple with the Guilds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUserSettingsResponse) GetGuildsOk() ([]DtoGuild, bool) {
	if o == nil || IsNil(o.Guilds) {
		return nil, false
	}
	return o.Guilds, true
}

// HasGuilds returns a boolean if a field has been set.
func (o *UserUserSettingsResponse) HasGuilds() bool {
	if o != nil && !IsNil(o.Guilds) {
		return true
	}

	return false
}

// SetGuilds gets a reference to the given []DtoGuild and assigns it to the Guilds field.
func (o *UserUserSettingsResponse) SetGuilds(v []DtoGuild) {
	o.Guilds = v
}

// GetGuildsLastMessages returns the GuildsLastMessages field value if set, zero value otherwise.
func (o *UserUserSettingsResponse) GetGuildsLastMessages() map[string]map[string]int32 {
	if o == nil || IsNil(o.GuildsLastMessages) {
		var ret map[string]map[string]int32
		return ret
	}
	return o.GuildsLastMessages
}

// GetGuildsLastMessagesOk returns a tuple with the GuildsLastMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUserSettingsResponse) GetGuildsLastMessagesOk() (map[string]map[string]int32, bool) {
	if o == nil || IsNil(o.GuildsLastMessages) {
		return map[string]map[string]int32{}, false
	}
	return o.GuildsLastMessages, true
}

// HasGuildsLastMessages returns a boolean if a field has been set.
func (o *UserUserSettingsResponse) HasGuildsLastMessages() bool {
	if o != nil && !IsNil(o.GuildsLastMessages) {
		return true
	}

	return false
}

// SetGuildsLastMessages gets a reference to the given map[string]map[string]int32 and assigns it to the GuildsLastMessages field.
func (o *UserUserSettingsResponse) SetGuildsLastMessages(v map[string]map[string]int32) {
	o.GuildsLastMessages = v
}

// GetMentions returns the Mentions field value if set, zero value otherwise.
func (o *UserUserSettingsResponse) GetMentions() map[string][]ModelMention {
	if o == nil || IsNil(o.Mentions) {
		var ret map[string][]ModelMention
		return ret
	}
	return o.Mentions
}

// GetMentionsOk returns a tuple with the Mentions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUserSettingsResponse) GetMentionsOk() (map[string][]ModelMention, bool) {
	if o == nil || IsNil(o.Mentions) {
		return map[string][]ModelMention{}, false
	}
	return o.Mentions, true
}

// HasMentions returns a boolean if a field has been set.
func (o *UserUserSettingsResponse) HasMentions() bool {
	if o != nil && !IsNil(o.Mentions) {
		return true
	}

	return false
}

// SetMentions gets a reference to the given map[string][]ModelMention and assigns it to the Mentions field.
func (o *UserUserSettingsResponse) SetMentions(v map[string][]ModelMention) {
	o.Mentions = v
}

// GetReadStates returns the ReadStates field value if set, zero value otherwise.
func (o *UserUserSettingsResponse) GetReadStates() map[string]int32 {
	if o == nil || IsNil(o.ReadStates) {
		var ret map[string]int32
		return ret
	}
	return o.ReadStates
}

// GetReadStatesOk returns a tuple with the ReadStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUserSettingsResponse) GetReadStatesOk() (map[string]int32, bool) {
	if o == nil || IsNil(o.ReadStates) {
		return map[string]int32{}, false
	}
	return o.ReadStates, true
}

// HasReadStates returns a boolean if a field has been set.
func (o *UserUserSettingsResponse) HasReadStates() bool {
	if o != nil && !IsNil(o.ReadStates) {
		return true
	}

	return false
}

// SetReadStates gets a reference to the given map[string]int32 and assigns it to the ReadStates field.
func (o *UserUserSettingsResponse) SetReadStates(v map[string]int32) {
	o.ReadStates = v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *UserUserSettingsResponse) GetSettings() ModelUserSettingsData {
	if o == nil || IsNil(o.Settings) {
		var ret ModelUserSettingsData
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUserSettingsResponse) GetSettingsOk() (*ModelUserSettingsData, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *UserUserSettingsResponse) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given ModelUserSettingsData and assigns it to the Settings field.
func (o *UserUserSettingsResponse) SetSettings(v ModelUserSettingsData) {
	o.Settings = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *UserUserSettingsResponse) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUserSettingsResponse) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *UserUserSettingsResponse) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *UserUserSettingsResponse) SetVersion(v int32) {
	o.Version = &v
}

func (o UserUserSettingsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserUserSettingsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChannelMentions) {
		toSerialize["channel_mentions"] = o.ChannelMentions
	}
	if !IsNil(o.Guilds) {
		toSerialize["guilds"] = o.Guilds
	}
	if !IsNil(o.GuildsLastMessages) {
		toSerialize["guilds_last_messages"] = o.GuildsLastMessages
	}
	if !IsNil(o.Mentions) {
		toSerialize["mentions"] = o.Mentions
	}
	if !IsNil(o.ReadStates) {
		toSerialize["read_states"] = o.ReadStates
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableUserUserSettingsResponse struct {
	value *UserUserSettingsResponse
	isSet bool
}

func (v NullableUserUserSettingsResponse) Get() *UserUserSettingsResponse {
	return v.value
}

func (v *NullableUserUserSettingsResponse) Set(val *UserUserSettingsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUserSettingsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUserSettingsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUserSettingsResponse(val *UserUserSettingsResponse) *NullableUserUserSettingsResponse {
	return &NullableUserUserSettingsResponse{value: val, isSet: true}
}

func (v NullableUserUserSettingsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUserSettingsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
