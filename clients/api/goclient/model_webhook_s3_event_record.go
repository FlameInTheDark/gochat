/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the WebhookS3EventRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookS3EventRecord{}

// WebhookS3EventRecord struct for WebhookS3EventRecord
type WebhookS3EventRecord struct {
	AwsRegion         *string                     `json:"awsRegion,omitempty"`
	EventName         *string                     `json:"eventName,omitempty"`
	EventSource       *string                     `json:"eventSource,omitempty"`
	EventTime         *string                     `json:"eventTime,omitempty"`
	EventVersion      *string                     `json:"eventVersion,omitempty"`
	RequestParameters *WebhookS3RequestParameters `json:"requestParameters,omitempty"`
	ResponseElements  map[string]string           `json:"responseElements,omitempty"`
	S3                *WebhookS3Element           `json:"s3,omitempty"`
	Source            *WebhookS3Source            `json:"source,omitempty"`
	UserIdentity      *WebhookS3Identity          `json:"userIdentity,omitempty"`
}

// NewWebhookS3EventRecord instantiates a new WebhookS3EventRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookS3EventRecord() *WebhookS3EventRecord {
	this := WebhookS3EventRecord{}
	return &this
}

// NewWebhookS3EventRecordWithDefaults instantiates a new WebhookS3EventRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookS3EventRecordWithDefaults() *WebhookS3EventRecord {
	this := WebhookS3EventRecord{}
	return &this
}

// GetAwsRegion returns the AwsRegion field value if set, zero value otherwise.
func (o *WebhookS3EventRecord) GetAwsRegion() string {
	if o == nil || IsNil(o.AwsRegion) {
		var ret string
		return ret
	}
	return *o.AwsRegion
}

// GetAwsRegionOk returns a tuple with the AwsRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3EventRecord) GetAwsRegionOk() (*string, bool) {
	if o == nil || IsNil(o.AwsRegion) {
		return nil, false
	}
	return o.AwsRegion, true
}

// HasAwsRegion returns a boolean if a field has been set.
func (o *WebhookS3EventRecord) HasAwsRegion() bool {
	if o != nil && !IsNil(o.AwsRegion) {
		return true
	}

	return false
}

// SetAwsRegion gets a reference to the given string and assigns it to the AwsRegion field.
func (o *WebhookS3EventRecord) SetAwsRegion(v string) {
	o.AwsRegion = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *WebhookS3EventRecord) GetEventName() string {
	if o == nil || IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3EventRecord) GetEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *WebhookS3EventRecord) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *WebhookS3EventRecord) SetEventName(v string) {
	o.EventName = &v
}

// GetEventSource returns the EventSource field value if set, zero value otherwise.
func (o *WebhookS3EventRecord) GetEventSource() string {
	if o == nil || IsNil(o.EventSource) {
		var ret string
		return ret
	}
	return *o.EventSource
}

// GetEventSourceOk returns a tuple with the EventSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3EventRecord) GetEventSourceOk() (*string, bool) {
	if o == nil || IsNil(o.EventSource) {
		return nil, false
	}
	return o.EventSource, true
}

// HasEventSource returns a boolean if a field has been set.
func (o *WebhookS3EventRecord) HasEventSource() bool {
	if o != nil && !IsNil(o.EventSource) {
		return true
	}

	return false
}

// SetEventSource gets a reference to the given string and assigns it to the EventSource field.
func (o *WebhookS3EventRecord) SetEventSource(v string) {
	o.EventSource = &v
}

// GetEventTime returns the EventTime field value if set, zero value otherwise.
func (o *WebhookS3EventRecord) GetEventTime() string {
	if o == nil || IsNil(o.EventTime) {
		var ret string
		return ret
	}
	return *o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3EventRecord) GetEventTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EventTime) {
		return nil, false
	}
	return o.EventTime, true
}

// HasEventTime returns a boolean if a field has been set.
func (o *WebhookS3EventRecord) HasEventTime() bool {
	if o != nil && !IsNil(o.EventTime) {
		return true
	}

	return false
}

// SetEventTime gets a reference to the given string and assigns it to the EventTime field.
func (o *WebhookS3EventRecord) SetEventTime(v string) {
	o.EventTime = &v
}

// GetEventVersion returns the EventVersion field value if set, zero value otherwise.
func (o *WebhookS3EventRecord) GetEventVersion() string {
	if o == nil || IsNil(o.EventVersion) {
		var ret string
		return ret
	}
	return *o.EventVersion
}

// GetEventVersionOk returns a tuple with the EventVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3EventRecord) GetEventVersionOk() (*string, bool) {
	if o == nil || IsNil(o.EventVersion) {
		return nil, false
	}
	return o.EventVersion, true
}

// HasEventVersion returns a boolean if a field has been set.
func (o *WebhookS3EventRecord) HasEventVersion() bool {
	if o != nil && !IsNil(o.EventVersion) {
		return true
	}

	return false
}

// SetEventVersion gets a reference to the given string and assigns it to the EventVersion field.
func (o *WebhookS3EventRecord) SetEventVersion(v string) {
	o.EventVersion = &v
}

// GetRequestParameters returns the RequestParameters field value if set, zero value otherwise.
func (o *WebhookS3EventRecord) GetRequestParameters() WebhookS3RequestParameters {
	if o == nil || IsNil(o.RequestParameters) {
		var ret WebhookS3RequestParameters
		return ret
	}
	return *o.RequestParameters
}

// GetRequestParametersOk returns a tuple with the RequestParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3EventRecord) GetRequestParametersOk() (*WebhookS3RequestParameters, bool) {
	if o == nil || IsNil(o.RequestParameters) {
		return nil, false
	}
	return o.RequestParameters, true
}

// HasRequestParameters returns a boolean if a field has been set.
func (o *WebhookS3EventRecord) HasRequestParameters() bool {
	if o != nil && !IsNil(o.RequestParameters) {
		return true
	}

	return false
}

// SetRequestParameters gets a reference to the given WebhookS3RequestParameters and assigns it to the RequestParameters field.
func (o *WebhookS3EventRecord) SetRequestParameters(v WebhookS3RequestParameters) {
	o.RequestParameters = &v
}

// GetResponseElements returns the ResponseElements field value if set, zero value otherwise.
func (o *WebhookS3EventRecord) GetResponseElements() map[string]string {
	if o == nil || IsNil(o.ResponseElements) {
		var ret map[string]string
		return ret
	}
	return o.ResponseElements
}

// GetResponseElementsOk returns a tuple with the ResponseElements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3EventRecord) GetResponseElementsOk() (map[string]string, bool) {
	if o == nil || IsNil(o.ResponseElements) {
		return map[string]string{}, false
	}
	return o.ResponseElements, true
}

// HasResponseElements returns a boolean if a field has been set.
func (o *WebhookS3EventRecord) HasResponseElements() bool {
	if o != nil && !IsNil(o.ResponseElements) {
		return true
	}

	return false
}

// SetResponseElements gets a reference to the given map[string]string and assigns it to the ResponseElements field.
func (o *WebhookS3EventRecord) SetResponseElements(v map[string]string) {
	o.ResponseElements = v
}

// GetS3 returns the S3 field value if set, zero value otherwise.
func (o *WebhookS3EventRecord) GetS3() WebhookS3Element {
	if o == nil || IsNil(o.S3) {
		var ret WebhookS3Element
		return ret
	}
	return *o.S3
}

// GetS3Ok returns a tuple with the S3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3EventRecord) GetS3Ok() (*WebhookS3Element, bool) {
	if o == nil || IsNil(o.S3) {
		return nil, false
	}
	return o.S3, true
}

// HasS3 returns a boolean if a field has been set.
func (o *WebhookS3EventRecord) HasS3() bool {
	if o != nil && !IsNil(o.S3) {
		return true
	}

	return false
}

// SetS3 gets a reference to the given WebhookS3Element and assigns it to the S3 field.
func (o *WebhookS3EventRecord) SetS3(v WebhookS3Element) {
	o.S3 = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *WebhookS3EventRecord) GetSource() WebhookS3Source {
	if o == nil || IsNil(o.Source) {
		var ret WebhookS3Source
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3EventRecord) GetSourceOk() (*WebhookS3Source, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *WebhookS3EventRecord) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given WebhookS3Source and assigns it to the Source field.
func (o *WebhookS3EventRecord) SetSource(v WebhookS3Source) {
	o.Source = &v
}

// GetUserIdentity returns the UserIdentity field value if set, zero value otherwise.
func (o *WebhookS3EventRecord) GetUserIdentity() WebhookS3Identity {
	if o == nil || IsNil(o.UserIdentity) {
		var ret WebhookS3Identity
		return ret
	}
	return *o.UserIdentity
}

// GetUserIdentityOk returns a tuple with the UserIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3EventRecord) GetUserIdentityOk() (*WebhookS3Identity, bool) {
	if o == nil || IsNil(o.UserIdentity) {
		return nil, false
	}
	return o.UserIdentity, true
}

// HasUserIdentity returns a boolean if a field has been set.
func (o *WebhookS3EventRecord) HasUserIdentity() bool {
	if o != nil && !IsNil(o.UserIdentity) {
		return true
	}

	return false
}

// SetUserIdentity gets a reference to the given WebhookS3Identity and assigns it to the UserIdentity field.
func (o *WebhookS3EventRecord) SetUserIdentity(v WebhookS3Identity) {
	o.UserIdentity = &v
}

func (o WebhookS3EventRecord) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookS3EventRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwsRegion) {
		toSerialize["awsRegion"] = o.AwsRegion
	}
	if !IsNil(o.EventName) {
		toSerialize["eventName"] = o.EventName
	}
	if !IsNil(o.EventSource) {
		toSerialize["eventSource"] = o.EventSource
	}
	if !IsNil(o.EventTime) {
		toSerialize["eventTime"] = o.EventTime
	}
	if !IsNil(o.EventVersion) {
		toSerialize["eventVersion"] = o.EventVersion
	}
	if !IsNil(o.RequestParameters) {
		toSerialize["requestParameters"] = o.RequestParameters
	}
	if !IsNil(o.ResponseElements) {
		toSerialize["responseElements"] = o.ResponseElements
	}
	if !IsNil(o.S3) {
		toSerialize["s3"] = o.S3
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.UserIdentity) {
		toSerialize["userIdentity"] = o.UserIdentity
	}
	return toSerialize, nil
}

type NullableWebhookS3EventRecord struct {
	value *WebhookS3EventRecord
	isSet bool
}

func (v NullableWebhookS3EventRecord) Get() *WebhookS3EventRecord {
	return v.value
}

func (v *NullableWebhookS3EventRecord) Set(val *WebhookS3EventRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookS3EventRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookS3EventRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookS3EventRecord(val *WebhookS3EventRecord) *NullableWebhookS3EventRecord {
	return &NullableWebhookS3EventRecord{value: val, isSet: true}
}

func (v NullableWebhookS3EventRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookS3EventRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
