/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the AuthConfirmationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthConfirmationRequest{}

// AuthConfirmationRequest struct for AuthConfirmationRequest
type AuthConfirmationRequest struct {
	// Unique discriminator
	Discriminator *string `json:"discriminator,omitempty"`
	// User ID
	Id *int32 `json:"id,omitempty"`
	// User name
	Name *string `json:"name,omitempty"`
	// User password
	Password *string `json:"password,omitempty"`
	// Registration token
	Token *string `json:"token,omitempty"`
}

// NewAuthConfirmationRequest instantiates a new AuthConfirmationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthConfirmationRequest() *AuthConfirmationRequest {
	this := AuthConfirmationRequest{}
	return &this
}

// NewAuthConfirmationRequestWithDefaults instantiates a new AuthConfirmationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthConfirmationRequestWithDefaults() *AuthConfirmationRequest {
	this := AuthConfirmationRequest{}
	return &this
}

// GetDiscriminator returns the Discriminator field value if set, zero value otherwise.
func (o *AuthConfirmationRequest) GetDiscriminator() string {
	if o == nil || IsNil(o.Discriminator) {
		var ret string
		return ret
	}
	return *o.Discriminator
}

// GetDiscriminatorOk returns a tuple with the Discriminator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthConfirmationRequest) GetDiscriminatorOk() (*string, bool) {
	if o == nil || IsNil(o.Discriminator) {
		return nil, false
	}
	return o.Discriminator, true
}

// HasDiscriminator returns a boolean if a field has been set.
func (o *AuthConfirmationRequest) HasDiscriminator() bool {
	if o != nil && !IsNil(o.Discriminator) {
		return true
	}

	return false
}

// SetDiscriminator gets a reference to the given string and assigns it to the Discriminator field.
func (o *AuthConfirmationRequest) SetDiscriminator(v string) {
	o.Discriminator = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuthConfirmationRequest) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthConfirmationRequest) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuthConfirmationRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AuthConfirmationRequest) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuthConfirmationRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthConfirmationRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuthConfirmationRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuthConfirmationRequest) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *AuthConfirmationRequest) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthConfirmationRequest) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *AuthConfirmationRequest) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *AuthConfirmationRequest) SetPassword(v string) {
	o.Password = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *AuthConfirmationRequest) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthConfirmationRequest) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *AuthConfirmationRequest) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *AuthConfirmationRequest) SetToken(v string) {
	o.Token = &v
}

func (o AuthConfirmationRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthConfirmationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Discriminator) {
		toSerialize["discriminator"] = o.Discriminator
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableAuthConfirmationRequest struct {
	value *AuthConfirmationRequest
	isSet bool
}

func (v NullableAuthConfirmationRequest) Get() *AuthConfirmationRequest {
	return v.value
}

func (v *NullableAuthConfirmationRequest) Set(val *AuthConfirmationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthConfirmationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthConfirmationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthConfirmationRequest(val *AuthConfirmationRequest) *NullableAuthConfirmationRequest {
	return &NullableAuthConfirmationRequest{value: val, isSet: true}
}

func (v NullableAuthConfirmationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthConfirmationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
