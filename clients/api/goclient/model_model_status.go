/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the ModelStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelStatus{}

// ModelStatus struct for ModelStatus
type ModelStatus struct {
	CustomStatusText *string `json:"custom_status_text,omitempty"`
	Status           *string `json:"status,omitempty"`
}

// NewModelStatus instantiates a new ModelStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelStatus() *ModelStatus {
	this := ModelStatus{}
	return &this
}

// NewModelStatusWithDefaults instantiates a new ModelStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelStatusWithDefaults() *ModelStatus {
	this := ModelStatus{}
	return &this
}

// GetCustomStatusText returns the CustomStatusText field value if set, zero value otherwise.
func (o *ModelStatus) GetCustomStatusText() string {
	if o == nil || IsNil(o.CustomStatusText) {
		var ret string
		return ret
	}
	return *o.CustomStatusText
}

// GetCustomStatusTextOk returns a tuple with the CustomStatusText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelStatus) GetCustomStatusTextOk() (*string, bool) {
	if o == nil || IsNil(o.CustomStatusText) {
		return nil, false
	}
	return o.CustomStatusText, true
}

// HasCustomStatusText returns a boolean if a field has been set.
func (o *ModelStatus) HasCustomStatusText() bool {
	if o != nil && !IsNil(o.CustomStatusText) {
		return true
	}

	return false
}

// SetCustomStatusText gets a reference to the given string and assigns it to the CustomStatusText field.
func (o *ModelStatus) SetCustomStatusText(v string) {
	o.CustomStatusText = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ModelStatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelStatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ModelStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ModelStatus) SetStatus(v string) {
	o.Status = &v
}

func (o ModelStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomStatusText) {
		toSerialize["custom_status_text"] = o.CustomStatusText
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableModelStatus struct {
	value *ModelStatus
	isSet bool
}

func (v NullableModelStatus) Get() *ModelStatus {
	return v.value
}

func (v *NullableModelStatus) Set(val *ModelStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableModelStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableModelStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelStatus(val *ModelStatus) *NullableModelStatus {
	return &NullableModelStatus{value: val, isSet: true}
}

func (v NullableModelStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
