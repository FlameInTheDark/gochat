/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the ModelUserSettingsNotifications type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelUserSettingsNotifications{}

// ModelUserSettingsNotifications struct for ModelUserSettingsNotifications
type ModelUserSettingsNotifications struct {
	Global        *bool  `json:"global,omitempty"`
	Muted         *bool  `json:"muted,omitempty"`
	Notifications *int32 `json:"notifications,omitempty"`
	Roles         *bool  `json:"roles,omitempty"`
}

// NewModelUserSettingsNotifications instantiates a new ModelUserSettingsNotifications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelUserSettingsNotifications() *ModelUserSettingsNotifications {
	this := ModelUserSettingsNotifications{}
	return &this
}

// NewModelUserSettingsNotificationsWithDefaults instantiates a new ModelUserSettingsNotifications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelUserSettingsNotificationsWithDefaults() *ModelUserSettingsNotifications {
	this := ModelUserSettingsNotifications{}
	return &this
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *ModelUserSettingsNotifications) GetGlobal() bool {
	if o == nil || IsNil(o.Global) {
		var ret bool
		return ret
	}
	return *o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsNotifications) GetGlobalOk() (*bool, bool) {
	if o == nil || IsNil(o.Global) {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *ModelUserSettingsNotifications) HasGlobal() bool {
	if o != nil && !IsNil(o.Global) {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given bool and assigns it to the Global field.
func (o *ModelUserSettingsNotifications) SetGlobal(v bool) {
	o.Global = &v
}

// GetMuted returns the Muted field value if set, zero value otherwise.
func (o *ModelUserSettingsNotifications) GetMuted() bool {
	if o == nil || IsNil(o.Muted) {
		var ret bool
		return ret
	}
	return *o.Muted
}

// GetMutedOk returns a tuple with the Muted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsNotifications) GetMutedOk() (*bool, bool) {
	if o == nil || IsNil(o.Muted) {
		return nil, false
	}
	return o.Muted, true
}

// HasMuted returns a boolean if a field has been set.
func (o *ModelUserSettingsNotifications) HasMuted() bool {
	if o != nil && !IsNil(o.Muted) {
		return true
	}

	return false
}

// SetMuted gets a reference to the given bool and assigns it to the Muted field.
func (o *ModelUserSettingsNotifications) SetMuted(v bool) {
	o.Muted = &v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *ModelUserSettingsNotifications) GetNotifications() int32 {
	if o == nil || IsNil(o.Notifications) {
		var ret int32
		return ret
	}
	return *o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsNotifications) GetNotificationsOk() (*int32, bool) {
	if o == nil || IsNil(o.Notifications) {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *ModelUserSettingsNotifications) HasNotifications() bool {
	if o != nil && !IsNil(o.Notifications) {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given int32 and assigns it to the Notifications field.
func (o *ModelUserSettingsNotifications) SetNotifications(v int32) {
	o.Notifications = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *ModelUserSettingsNotifications) GetRoles() bool {
	if o == nil || IsNil(o.Roles) {
		var ret bool
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserSettingsNotifications) GetRolesOk() (*bool, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *ModelUserSettingsNotifications) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given bool and assigns it to the Roles field.
func (o *ModelUserSettingsNotifications) SetRoles(v bool) {
	o.Roles = &v
}

func (o ModelUserSettingsNotifications) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelUserSettingsNotifications) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Global) {
		toSerialize["global"] = o.Global
	}
	if !IsNil(o.Muted) {
		toSerialize["muted"] = o.Muted
	}
	if !IsNil(o.Notifications) {
		toSerialize["notifications"] = o.Notifications
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableModelUserSettingsNotifications struct {
	value *ModelUserSettingsNotifications
	isSet bool
}

func (v NullableModelUserSettingsNotifications) Get() *ModelUserSettingsNotifications {
	return v.value
}

func (v *NullableModelUserSettingsNotifications) Set(val *ModelUserSettingsNotifications) {
	v.value = val
	v.isSet = true
}

func (v NullableModelUserSettingsNotifications) IsSet() bool {
	return v.isSet
}

func (v *NullableModelUserSettingsNotifications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelUserSettingsNotifications(val *ModelUserSettingsNotifications) *NullableModelUserSettingsNotifications {
	return &NullableModelUserSettingsNotifications{value: val, isSet: true}
}

func (v NullableModelUserSettingsNotifications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelUserSettingsNotifications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
