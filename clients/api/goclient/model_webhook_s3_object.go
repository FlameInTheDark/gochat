/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the WebhookS3Object type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookS3Object{}

// WebhookS3Object struct for WebhookS3Object
type WebhookS3Object struct {
	ContentType  *string           `json:"contentType,omitempty"`
	ETag         *string           `json:"eTag,omitempty"`
	Key          *string           `json:"key,omitempty"`
	Sequencer    *string           `json:"sequencer,omitempty"`
	Size         *int32            `json:"size,omitempty"`
	UserMetadata map[string]string `json:"userMetadata,omitempty"`
}

// NewWebhookS3Object instantiates a new WebhookS3Object object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookS3Object() *WebhookS3Object {
	this := WebhookS3Object{}
	return &this
}

// NewWebhookS3ObjectWithDefaults instantiates a new WebhookS3Object object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookS3ObjectWithDefaults() *WebhookS3Object {
	this := WebhookS3Object{}
	return &this
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *WebhookS3Object) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3Object) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *WebhookS3Object) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *WebhookS3Object) SetContentType(v string) {
	o.ContentType = &v
}

// GetETag returns the ETag field value if set, zero value otherwise.
func (o *WebhookS3Object) GetETag() string {
	if o == nil || IsNil(o.ETag) {
		var ret string
		return ret
	}
	return *o.ETag
}

// GetETagOk returns a tuple with the ETag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3Object) GetETagOk() (*string, bool) {
	if o == nil || IsNil(o.ETag) {
		return nil, false
	}
	return o.ETag, true
}

// HasETag returns a boolean if a field has been set.
func (o *WebhookS3Object) HasETag() bool {
	if o != nil && !IsNil(o.ETag) {
		return true
	}

	return false
}

// SetETag gets a reference to the given string and assigns it to the ETag field.
func (o *WebhookS3Object) SetETag(v string) {
	o.ETag = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *WebhookS3Object) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3Object) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *WebhookS3Object) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *WebhookS3Object) SetKey(v string) {
	o.Key = &v
}

// GetSequencer returns the Sequencer field value if set, zero value otherwise.
func (o *WebhookS3Object) GetSequencer() string {
	if o == nil || IsNil(o.Sequencer) {
		var ret string
		return ret
	}
	return *o.Sequencer
}

// GetSequencerOk returns a tuple with the Sequencer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3Object) GetSequencerOk() (*string, bool) {
	if o == nil || IsNil(o.Sequencer) {
		return nil, false
	}
	return o.Sequencer, true
}

// HasSequencer returns a boolean if a field has been set.
func (o *WebhookS3Object) HasSequencer() bool {
	if o != nil && !IsNil(o.Sequencer) {
		return true
	}

	return false
}

// SetSequencer gets a reference to the given string and assigns it to the Sequencer field.
func (o *WebhookS3Object) SetSequencer(v string) {
	o.Sequencer = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *WebhookS3Object) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3Object) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *WebhookS3Object) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *WebhookS3Object) SetSize(v int32) {
	o.Size = &v
}

// GetUserMetadata returns the UserMetadata field value if set, zero value otherwise.
func (o *WebhookS3Object) GetUserMetadata() map[string]string {
	if o == nil || IsNil(o.UserMetadata) {
		var ret map[string]string
		return ret
	}
	return o.UserMetadata
}

// GetUserMetadataOk returns a tuple with the UserMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3Object) GetUserMetadataOk() (map[string]string, bool) {
	if o == nil || IsNil(o.UserMetadata) {
		return map[string]string{}, false
	}
	return o.UserMetadata, true
}

// HasUserMetadata returns a boolean if a field has been set.
func (o *WebhookS3Object) HasUserMetadata() bool {
	if o != nil && !IsNil(o.UserMetadata) {
		return true
	}

	return false
}

// SetUserMetadata gets a reference to the given map[string]string and assigns it to the UserMetadata field.
func (o *WebhookS3Object) SetUserMetadata(v map[string]string) {
	o.UserMetadata = v
}

func (o WebhookS3Object) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookS3Object) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	if !IsNil(o.ETag) {
		toSerialize["eTag"] = o.ETag
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Sequencer) {
		toSerialize["sequencer"] = o.Sequencer
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.UserMetadata) {
		toSerialize["userMetadata"] = o.UserMetadata
	}
	return toSerialize, nil
}

type NullableWebhookS3Object struct {
	value *WebhookS3Object
	isSet bool
}

func (v NullableWebhookS3Object) Get() *WebhookS3Object {
	return v.value
}

func (v *NullableWebhookS3Object) Set(val *WebhookS3Object) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookS3Object) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookS3Object) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookS3Object(val *WebhookS3Object) *NullableWebhookS3Object {
	return &NullableWebhookS3Object{value: val, isSet: true}
}

func (v NullableWebhookS3Object) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookS3Object) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
