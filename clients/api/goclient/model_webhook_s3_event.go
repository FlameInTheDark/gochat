/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the WebhookS3Event type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookS3Event{}

// WebhookS3Event struct for WebhookS3Event
type WebhookS3Event struct {
	EventName *string                `json:"EventName,omitempty"`
	Key       *string                `json:"Key,omitempty"`
	Records   []WebhookS3EventRecord `json:"Records,omitempty"`
}

// NewWebhookS3Event instantiates a new WebhookS3Event object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookS3Event() *WebhookS3Event {
	this := WebhookS3Event{}
	return &this
}

// NewWebhookS3EventWithDefaults instantiates a new WebhookS3Event object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookS3EventWithDefaults() *WebhookS3Event {
	this := WebhookS3Event{}
	return &this
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *WebhookS3Event) GetEventName() string {
	if o == nil || IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3Event) GetEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *WebhookS3Event) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *WebhookS3Event) SetEventName(v string) {
	o.EventName = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *WebhookS3Event) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3Event) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *WebhookS3Event) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *WebhookS3Event) SetKey(v string) {
	o.Key = &v
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *WebhookS3Event) GetRecords() []WebhookS3EventRecord {
	if o == nil || IsNil(o.Records) {
		var ret []WebhookS3EventRecord
		return ret
	}
	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookS3Event) GetRecordsOk() ([]WebhookS3EventRecord, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *WebhookS3Event) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []WebhookS3EventRecord and assigns it to the Records field.
func (o *WebhookS3Event) SetRecords(v []WebhookS3EventRecord) {
	o.Records = v
}

func (o WebhookS3Event) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookS3Event) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventName) {
		toSerialize["EventName"] = o.EventName
	}
	if !IsNil(o.Key) {
		toSerialize["Key"] = o.Key
	}
	if !IsNil(o.Records) {
		toSerialize["Records"] = o.Records
	}
	return toSerialize, nil
}

type NullableWebhookS3Event struct {
	value *WebhookS3Event
	isSet bool
}

func (v NullableWebhookS3Event) Get() *WebhookS3Event {
	return v.value
}

func (v *NullableWebhookS3Event) Set(val *WebhookS3Event) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookS3Event) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookS3Event) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookS3Event(val *WebhookS3Event) *NullableWebhookS3Event {
	return &NullableWebhookS3Event{value: val, isSet: true}
}

func (v NullableWebhookS3Event) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookS3Event) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
