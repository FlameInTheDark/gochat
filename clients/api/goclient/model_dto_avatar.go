/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the DtoAvatar type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoAvatar{}

// DtoAvatar struct for DtoAvatar
type DtoAvatar struct {
	ContentType *string `json:"content_type,omitempty"`
	Height      *int32  `json:"height,omitempty"`
	Id          *int32  `json:"id,omitempty"`
	Size        *int32  `json:"size,omitempty"`
	Url         *string `json:"url,omitempty"`
	Width       *int32  `json:"width,omitempty"`
}

// NewDtoAvatar instantiates a new DtoAvatar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoAvatar() *DtoAvatar {
	this := DtoAvatar{}
	return &this
}

// NewDtoAvatarWithDefaults instantiates a new DtoAvatar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoAvatarWithDefaults() *DtoAvatar {
	this := DtoAvatar{}
	return &this
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *DtoAvatar) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAvatar) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *DtoAvatar) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *DtoAvatar) SetContentType(v string) {
	o.ContentType = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *DtoAvatar) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAvatar) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *DtoAvatar) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *DtoAvatar) SetHeight(v int32) {
	o.Height = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DtoAvatar) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAvatar) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DtoAvatar) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DtoAvatar) SetId(v int32) {
	o.Id = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DtoAvatar) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAvatar) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DtoAvatar) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *DtoAvatar) SetSize(v int32) {
	o.Size = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *DtoAvatar) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAvatar) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *DtoAvatar) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *DtoAvatar) SetUrl(v string) {
	o.Url = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *DtoAvatar) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAvatar) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *DtoAvatar) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *DtoAvatar) SetWidth(v int32) {
	o.Width = &v
}

func (o DtoAvatar) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoAvatar) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContentType) {
		toSerialize["content_type"] = o.ContentType
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	return toSerialize, nil
}

type NullableDtoAvatar struct {
	value *DtoAvatar
	isSet bool
}

func (v NullableDtoAvatar) Get() *DtoAvatar {
	return v.value
}

func (v *NullableDtoAvatar) Set(val *DtoAvatar) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoAvatar) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoAvatar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoAvatar(val *DtoAvatar) *NullableDtoAvatar {
	return &NullableDtoAvatar{value: val, isSet: true}
}

func (v NullableDtoAvatar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoAvatar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
