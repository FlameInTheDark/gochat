/*
GoChat API

This is an API for the GoChat

API version: 1.0
Contact: viktorfreedom@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
)

// checks if the GuildUpdateGuildRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GuildUpdateGuildRequest{}

// GuildUpdateGuildRequest struct for GuildUpdateGuildRequest
type GuildUpdateGuildRequest struct {
	IconId      *int32  `json:"icon_id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Permissions *int32  `json:"permissions,omitempty"`
	Public      *bool   `json:"public,omitempty"`
}

// NewGuildUpdateGuildRequest instantiates a new GuildUpdateGuildRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGuildUpdateGuildRequest() *GuildUpdateGuildRequest {
	this := GuildUpdateGuildRequest{}
	return &this
}

// NewGuildUpdateGuildRequestWithDefaults instantiates a new GuildUpdateGuildRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGuildUpdateGuildRequestWithDefaults() *GuildUpdateGuildRequest {
	this := GuildUpdateGuildRequest{}
	return &this
}

// GetIconId returns the IconId field value if set, zero value otherwise.
func (o *GuildUpdateGuildRequest) GetIconId() int32 {
	if o == nil || IsNil(o.IconId) {
		var ret int32
		return ret
	}
	return *o.IconId
}

// GetIconIdOk returns a tuple with the IconId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuildUpdateGuildRequest) GetIconIdOk() (*int32, bool) {
	if o == nil || IsNil(o.IconId) {
		return nil, false
	}
	return o.IconId, true
}

// HasIconId returns a boolean if a field has been set.
func (o *GuildUpdateGuildRequest) HasIconId() bool {
	if o != nil && !IsNil(o.IconId) {
		return true
	}

	return false
}

// SetIconId gets a reference to the given int32 and assigns it to the IconId field.
func (o *GuildUpdateGuildRequest) SetIconId(v int32) {
	o.IconId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GuildUpdateGuildRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuildUpdateGuildRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GuildUpdateGuildRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GuildUpdateGuildRequest) SetName(v string) {
	o.Name = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *GuildUpdateGuildRequest) GetPermissions() int32 {
	if o == nil || IsNil(o.Permissions) {
		var ret int32
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuildUpdateGuildRequest) GetPermissionsOk() (*int32, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *GuildUpdateGuildRequest) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given int32 and assigns it to the Permissions field.
func (o *GuildUpdateGuildRequest) SetPermissions(v int32) {
	o.Permissions = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *GuildUpdateGuildRequest) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuildUpdateGuildRequest) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *GuildUpdateGuildRequest) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *GuildUpdateGuildRequest) SetPublic(v bool) {
	o.Public = &v
}

func (o GuildUpdateGuildRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GuildUpdateGuildRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IconId) {
		toSerialize["icon_id"] = o.IconId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	return toSerialize, nil
}

type NullableGuildUpdateGuildRequest struct {
	value *GuildUpdateGuildRequest
	isSet bool
}

func (v NullableGuildUpdateGuildRequest) Get() *GuildUpdateGuildRequest {
	return v.value
}

func (v *NullableGuildUpdateGuildRequest) Set(val *GuildUpdateGuildRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGuildUpdateGuildRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGuildUpdateGuildRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGuildUpdateGuildRequest(val *GuildUpdateGuildRequest) *NullableGuildUpdateGuildRequest {
	return &NullableGuildUpdateGuildRequest{value: val, isSet: true}
}

func (v NullableGuildUpdateGuildRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGuildUpdateGuildRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
