{{- if .Values.minio.enabled -}}
# This job waits for the API service to be ready, then configures MinIO webhooks.
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "gochat.fullname" . }}-minio-webhook-config
  labels:
    {{- include "gochat.labels" . | nindent 4 }}
    app.kubernetes.io/component: minio-webhook-config
  annotations:
    # Run late in the install/upgrade process
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "20"
    # Delete previous job before creating new one, delete successful job
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: {{ include "gochat.fullname" . }}-minio-webhook-config
      labels:
        {{- include "gochat.labels" . | nindent 8 }}
        app.kubernetes.io/component: minio-webhook-config
    spec:
      restartPolicy: OnFailure
      # Init container waits for the API service to be responsive
      initContainers:
        - name: wait-for-api
          image: curlimages/curl:latest # Using a small curl image
          imagePullPolicy: IfNotPresent
          env:
            - name: API_HEALTH_URL
              # Assuming a /healthz endpoint on the API service
              value: "http://{{ include "gochat.fullname" . }}-api:{{ .Values.api.service.port }}/healthz"
          command: ["sh", "-c"]
          args:
            - |
              echo "Waiting for API service at $API_HEALTH_URL to be ready..."
              until curl --fail --silent --output /dev/null "$API_HEALTH_URL"; do
                echo -n "."
                sleep 5
              done
              echo "API service is ready!"
      # Main container configures the webhook
      containers:
        - name: minio-webhook-config
          image: "minio/mc:latest"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-cex"]
          env:
            - name: MINIO_ENDPOINT
              value: "http://{{ include "gochat.fullname" . }}-minio:{{ .Values.minio.service.port }}"
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "gochat.fullname" . }}-minio
                  key: MINIO_ROOT_USER
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "gochat.fullname" . }}-minio
                  key: MINIO_ROOT_PASSWORD
            - name: API_SERVICE_URL
              value: "http://{{ include "gochat.fullname" . }}-api:{{ .Values.api.service.port }}"
          args:
            - |
              echo "Logging into MinIO..."
              mc alias set local $MINIO_ENDPOINT $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD

              # --- Webhook Configuration ---
              WEBHOOK_ENDPOINT="$API_SERVICE_URL/api/v1/webhook/storage/events"
              WEBHOOK_TARGET_NAME="gochatwebhook"

              echo "Setting MinIO config for webhook target '$WEBHOOK_TARGET_NAME' -> $WEBHOOK_ENDPOINT..."
              mc admin config set local notify_webhook:$WEBHOOK_TARGET_NAME endpoint="$WEBHOOK_ENDPOINT" queue_limit="1000" queue_dir="" || echo "WARN: Failed to set webhook config."

              echo "Applying MinIO config changes (non-interactive)..."
              mc admin service update local || echo "WARN: Failed to apply MinIO config update."
              # Brief sleep to allow config update to settle?
              sleep 5
              echo "Waiting for MinIO server (local) to report readiness after update..."
              until mc ready local; do sleep 2; done
              echo "MinIO server is ready after update."

              echo "Adding event notification rule for target '$WEBHOOK_TARGET_NAME'..."
              mc event add local/ "arn:minio:sqs::${WEBHOOK_TARGET_NAME}:webhook" --event "put,delete" || echo "WARN: Failed to add webhook event notification rule."

              echo "Webhook configuration process complete."
{{- end }} 