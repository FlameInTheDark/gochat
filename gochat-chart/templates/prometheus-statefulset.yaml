{{- if .Values.prometheus.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "gochat.fullname" . }}-prometheus
  labels:
    {{- include "gochat.labels" . | nindent 4 }}
    app.kubernetes.io/component: prometheus
spec:
  serviceName: {{ include "gochat.fullname" . }}-prometheus # Regular service is sufficient for Prometheus usually
  replicas: {{ .Values.prometheus.replicaCount }}
  selector:
    matchLabels:
      {{- include "gochat.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: prometheus
  template:
    metadata:
      labels:
        {{- include "gochat.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: prometheus
    spec:
      # serviceAccountName: {{ include "gochat.serviceAccountName" . }}-prometheus # If specific SA is needed
      terminationGracePeriodSeconds: 300 # Allow time for shutdown
      containers:
        - name: prometheus
          image: "{{ .Values.prometheus.image.repository }}:{{ .Values.prometheus.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.prometheus.image.pullPolicy }}
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path={{ .Values.prometheus.persistence.mountPath }}
            - --web.console.libraries=/usr/share/prometheus/console_libraries
            - --web.console.templates=/usr/share/prometheus/consoles
            # Add other args like --web.enable-lifecycle for reload via API
          ports:
            - name: http
              containerPort: {{ .Values.prometheus.service.port }}
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
              readOnly: true
            - name: data
              mountPath: {{ .Values.prometheus.persistence.mountPath }}
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
            {{- toYaml .Values.prometheus.resources | nindent 12 }}
      volumes:
        - name: config
          configMap:
            name: {{ include "gochat.fullname" . }}-prometheus
            defaultMode: 0644
      {{- with .Values.prometheus.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.prometheus.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.prometheus.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.prometheus.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.prometheus.persistence.size | quote }}
      {{- if .Values.prometheus.persistence.storageClass }}
      {{- if (eq "-" .Values.prometheus.persistence.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.prometheus.persistence.storageClass }}"
      {{- end }}
      {{- end }}
  {{- end }}
{{- end }} 