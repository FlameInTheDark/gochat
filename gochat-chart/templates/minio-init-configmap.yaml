{{- if and .Values.minio.enabled .Values.minio.init.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "gochat.fullname" . }}-minio-init-script
  labels:
    {{- include "gochat.labels" . | nindent 4 }}
    app.kubernetes.io/component: minio-init
data:
  init-minio.sh: |-
    #!/bin/sh
    set -e

    MC_ALIAS="local"

    # MinIO service endpoint within Kubernetes
    MINIO_SVC={{ include "gochat.fullname" . }}-minio
    MINIO_PORT={{ .Values.minio.service.apiPort }}
    MINIO_ENDPOINT="http://$MINIO_SVC:$MINIO_PORT"

    echo "Waiting for MinIO service at $MINIO_ENDPOINT..."

    echo "Configuring mc alias: $MC_ALIAS"
    # Correct usage for mc alias set - endpoint value should contain the scheme
    mc alias set local $MINIO_ENDPOINT $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD
    echo "Waiting for MinIO server (local) to report readiness..."
    until mc ready local; do sleep 1; done # Wait until ready
    echo "MinIO server is ready."

    for bucket in {{ .Values.minio.init.buckets | join " " }}; do
      echo "Checking bucket: local/$bucket"
      if ! mc ls local/"$bucket" > /dev/null 2>&1; then
        echo "Creating bucket: local/$bucket"
        mc mb local/"$bucket"
      else
        echo "Bucket local/$bucket already exists."
      fi
      echo "Applying policy to bucket: local/$bucket"
      # Corrected command for anonymous download policy
      mc anonymous set download local/"$bucket" || echo "WARN: Failed to set policy for $bucket"
      echo "Policy applied to local/$bucket."
    done

    # ADDED: Service Account Creation Logic
    echo "Ensuring service account '$API_ACCESS_KEY' exists for user 'admin'..."
    mc admin user svcacct add local admin --access-key "$API_ACCESS_KEY" --secret-key "$API_SECRET_KEY" || echo "WARN: Service account '$API_ACCESS_KEY' might already exist or add command failed."

    echo "MinIO initialization complete."
{{- end }} 