name: Build Dev Images

on:
  push:
    branches:
      - dev # Trigger only on pushes to the dev branch

permissions:
  contents: read # Only needs read access to checkout code
  packages: write # Needed to push container images to GHCR

jobs:
  build-and-push-dev:
    name: Build and Push Dev Images
    runs-on: ubuntu-latest
    steps:
      - name: Check out code from dev branch
        uses: actions/checkout@v4
        # Default ref is the branch that triggered the workflow (dev)

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for API image (dev tag)
        id: meta_api_dev
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/gochat-api
          tags: |
            type=raw,value=dev # Explicitly tag as dev

      - name: Build and push API image (dev)
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the repository root
          file: ./api.Dockerfile # Dockerfile is in the root
          push: true
          tags: ${{ steps.meta_api_dev.outputs.tags }}
          labels: ${{ steps.meta_api_dev.outputs.labels }}
          cache-from: type=gha,scope=api-dev # Separate cache scope for dev
          cache-to: type=gha,mode=max,scope=api-dev

      - name: Extract metadata for WS image (dev tag)
        id: meta_ws_dev
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/gochat-ws
          tags: |
            type=raw,value=dev # Explicitly tag as dev

      - name: Build and push WS image (dev)
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the repository root
          file: ./ws.Dockerfile # Dockerfile is in the root
          push: true
          tags: ${{ steps.meta_ws_dev.outputs.tags }}
          labels: ${{ steps.meta_ws_dev.outputs.labels }}
          cache-from: type=gha,scope=ws-dev # Separate cache scope for dev
          cache-to: type=gha,mode=max,scope=ws-dev
