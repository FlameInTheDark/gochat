name: Build and Upload Release Assets

# Trigger when a release is published
on:
  release:
    types: [published]

permissions:
  contents: write # Needed to upload assets to existing release

jobs:
  build-upload:
    name: Build and Upload Binaries
    runs-on: ubuntu-latest
    steps:
      # Checkout the specific tag associated with the release
      - name: Check out code at specific tag
        uses: actions/checkout@v4
        with:
          # github.ref is the tag name for release events (e.g., refs/tags/v1.0.0)
          ref: ${{ github.ref }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21' # Specify your Go version

      # Download dependencies
      - name: Download Go Modules
        run: go mod download

      - name: Build Go Binaries (Cross-Platform)
        id: build
        run: |
          set -e # Exit on error
          # Define targets (OS/Arch)
          targets=(
            "linux/amd64"
            "linux/arm64"
            "windows/amd64"
            "darwin/amd64"
            "darwin/arm64"
          )

          INSTALLER_DIR="cmd/installer" # Path to the installer code
          OUTPUT_DIR="release_builds"   # Temporary directory for builds
          mkdir -p ${OUTPUT_DIR}

          for target in "${targets[@]}"; do
            IFS='/' read -r os arch <<< "$target"
            output_name="installer-${os}-${arch}"
            if [ "$os" = "windows" ]; then
              output_name+=".exe"
            fi

            echo "Building for $os/$arch -> ${OUTPUT_DIR}/${output_name}"
            GOOS=$os GOARCH=$arch go build -ldflags="-s -w" -o "${OUTPUT_DIR}/${output_name}" "${INSTALLER_DIR}/main.go"
          done

          # List built files
          ls -R ${OUTPUT_DIR}

      - name: Upload Release Assets using gh CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use default token here, just needs write permission
          # Get the tag name from the release event
          RELEASE_TAG: ${{ github.ref_name }}
        run: |
          echo "Uploading assets for tag: $RELEASE_TAG"
          if [ -z "$RELEASE_TAG" ]; then
            echo "Error: Triggering tag name not found."
            exit 1
          fi
          # Upload all files from release_builds to the existing release matching the tag
          gh release upload "$RELEASE_TAG" release_builds/* --clobber
