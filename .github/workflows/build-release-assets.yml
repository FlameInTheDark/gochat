name: Build and Upload Release Assets

# Trigger when a release is published
on:
  release:
    types: [published]

permissions:
  contents: write # Needed to upload assets to existing release
  packages: write # Needed to push container images to GHCR

jobs:
  build-assets-and-images: # Combine jobs for simplicity or keep separate if preferred
    name: Build Binaries and Container Images
    runs-on: ubuntu-latest
    steps:
      # Checkout the specific tag associated with the release
      - name: Check out code at specific tag
        uses: actions/checkout@v4
        with:
          # github.ref is the tag name for release events (e.g., refs/tags/v1.0.0)
          ref: ${{ github.ref }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21' # Specify your Go version

      # Download dependencies within the installer directory
      - name: Download Go Modules
        working-directory: cmd/installer
        run: go mod download

      # Tidy ensures go.mod matches source code within the installer directory
      - name: Tidy Go Modules
        working-directory: cmd/installer
        run: go mod tidy

      - name: Build Go Binaries (Cross-Platform)
        id: build
        working-directory: cmd/installer
        run: |
          set -e # Exit on error
          # Define targets (OS/Arch)
          targets=(
            "linux/amd64"
            "linux/arm64"
            "windows/amd64"
            "darwin/amd64"
            "darwin/arm64"
          )

          # Output dir relative to root, need to go up two levels from cmd/installer
          OUTPUT_DIR="../../release_builds"
          mkdir -p ${OUTPUT_DIR}

          for target in "${targets[@]}"; do
            IFS='/' read -r os arch <<< "$target"
            output_name="installer-${os}-${arch}"
            if [ "$os" = "windows" ]; then
              output_name+=".exe"
            fi
            # Build main.go from the current (cmd/installer) directory
            echo "Building for $os/$arch -> ${OUTPUT_DIR}/${output_name}"
            GOOS=$os GOARCH=$arch go build -ldflags="-s -w" -o "${OUTPUT_DIR}/${output_name}" .
          done

          # List built files
          ls -R ${OUTPUT_DIR}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Uses the workflow's GITHUB_TOKEN

      - name: Extract metadata for API image
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/gochat-api
          tags: |
            type=ref,event=tag
            # Always tag as latest on release
            type=raw,value=latest,enable=true

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the repository root
          file: ./api.Dockerfile # Dockerfile is in the root
          push: true
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for WS image
        id: meta_ws
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/gochat-ws
          tags: |
            type=ref,event=tag
            # Always tag as latest on release
            type=raw,value=latest,enable=true

      - name: Build and push WS image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the repository root
          file: ./ws.Dockerfile # Dockerfile is in the root
          push: true
          tags: ${{ steps.meta_ws.outputs.tags }}
          labels: ${{ steps.meta_ws.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for AUTH image
        id: meta_auth
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/gochat-auth
          tags: |
            type=ref,event=tag
            # Always tag as latest on release
            type=raw,value=latest,enable=true

      - name: Build and push AUTH image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./auth.Dockerfile
          push: true
          tags: ${{ steps.meta_auth.outputs.tags }}
          labels: ${{ steps.meta_auth.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for INDEXER image
        id: meta_indexer
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/gochat-indexer
          tags: |
            type=ref,event=tag
            # Always tag as latest on release
            type=raw,value=latest,enable=true

      - name: Build and push INDEXER image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./indexer.Dockerfile
          push: true
          tags: ${{ steps.meta_indexer.outputs.tags }}
          labels: ${{ steps.meta_indexer.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload Release Assets using gh CLI
        # This step runs relative to the root, so the asset path is correct
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Get the tag name from the release event
          RELEASE_TAG: ${{ github.ref_name }}
        run: |
          echo "Uploading assets for tag: $RELEASE_TAG"
          if [ -z "$RELEASE_TAG" ]; then
            echo "Error: Triggering tag name not found."
            exit 1
          fi
          # Upload all files from release_builds to the existing release matching the tag
          gh release upload "$RELEASE_TAG" release_builds/* --clobber
