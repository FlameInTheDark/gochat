name: Release Installer

# Trigger the workflow on pushes to branches matching main
on:
  push:
    branches:
      - main # Trigger on push to main

permissions:
  contents: write # To push tags/commits, create releases, upload assets
  issues: write   # Optional: semantic-release can comment on issues/PRs
  pull-requests: write # Optional: semantic-release can comment on issues/PRs

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    # Prevent duplicate runs for pushes that include multiple commits
    concurrency: ${{ github.workflow }}-${{ github.ref }}
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }} # Output if release was published
      new_release_tag: ${{ steps.semantic.outputs.new_release_git_tag }}     # Output the tag name

    steps:
      # 1. Checkout code
      - name: Check out code
        uses: actions/checkout@v4
        with:
          # Fetch all history so semantic-release can analyze commits
          fetch-depth: 0
          # Persist credentials needed for the push-back step by semantic-release/git
          persist-credentials: false

      # 2. Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*' # Use LTS Node version

      # 3. Install semantic-release and plugins
      # Committing package.json with these as devDeps is recommended
      - name: Install semantic-release plugins
        run: |
          npm install -D \
            semantic-release \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github

      # 4. Run semantic-release
      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Run semantic-release and capture outputs
        run: npx semantic-release
        # Continue workflow even if semantic-release determines no release is needed
        continue-on-error: true

      # Check outputs from semantic-release (these might vary slightly by version/plugins)
      - name: Debug semantic-release step outputs
        if: always() # Always run this step
        run: echo "${{ toJSON(steps.semantic.outputs) }}"

  build-upload:
    name: Build and Upload Binaries
    needs: release # Run after the release job
    # Only run if semantic-release actually published a release and outputted a tag
    if: needs.release.outputs.new_release_tag != ''
    runs-on: ubuntu-latest
    steps:
      # Checkout the specific tag created by semantic-release
      - name: Check out code at specific tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.new_release_tag }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21' # Specify your Go version

      - name: Build Go Binaries (Cross-Platform)
        id: build
        run: |
          set -e # Exit on error
          targets=(
            "linux/amd64" "linux/arm64" "windows/amd64" "darwin/amd64" "darwin/arm64"
          )
          INSTALLER_DIR="cmd/installer"
          OUTPUT_DIR="release_builds"
          mkdir -p ${OUTPUT_DIR}

          for target in ${targets[@]}; do
            IFS='/' read -r os arch <<< "$target"
            output_name="installer-${os}-${arch}"
            if [ "$os" = "windows" ]; then output_name+=".exe"; fi
            echo "Building for $os/$arch -> ${OUTPUT_DIR}/${output_name}"
            GOOS=$os GOARCH=$arch go build -ldflags="-s -w" -o "${OUTPUT_DIR}/${output_name}" "${INSTALLER_DIR}/main.go"
          done
          ls -R ${OUTPUT_DIR}

      - name: Upload Release Assets using gh CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ needs.release.outputs.new_release_tag }}
        run: |
          echo "Uploading assets for tag: $RELEASE_TAG"
          gh release upload "$RELEASE_TAG" release_builds/* --clobber
